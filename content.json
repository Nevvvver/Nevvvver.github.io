{"meta":{"title":"Never","subtitle":"","description":"","author":"Never","url":"http://Nevvvver.github.io","root":"/"},"pages":[{"title":"标签","date":"2022-03-14T19:30:14.438Z","updated":"2022-03-14T19:30:14.438Z","comments":false,"path":"tags/index.html","permalink":"http://nevvvver.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-14T19:37:47.600Z","updated":"2022-03-14T19:37:47.600Z","comments":false,"path":"categories/index.html","permalink":"http://nevvvver.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"可枚举性(enumerable)","slug":"enumerable","date":"2022-03-14T18:53:58.000Z","updated":"2022-03-15T16:09:02.657Z","comments":true,"path":"2022/03/15/enumerable/","link":"","permalink":"http://nevvvver.github.io/2022/03/15/enumerable/","excerpt":"","text":"描述 在 JavaScript 中，对象的属性可以分为实例属性和原型 (prototype) 属性。 实例属性：指的是自身属性。 原型属性：指的是从原型链上继承的属性。 Object.prototype.hasOwnProperty() 可以判断某一个属性是否是对象的自身属性。 对象的每一个属性都有一个描述对象 (Descriptor) ,描述对象的 enumerable 属性称为“可枚举性”。 引入“可枚举性”这个概念的最初目的，就是让某些属性可以规避掉 for...in 操作。 可枚举性的作用与可枚举性有关的操作： 函数方法 描述 实例属性 原型属性 for...in 遍历对象自身和原型上的所有可枚举属性 〇 〇 Object.keys() 返回对象自身的所有可枚举属性的键名 〇 JSON.stringify 只串行化对象自身的所有可枚举属性 〇 Object.assign()(ES6) 只拷贝对象自身的所有可枚举属性 〇 Object.getOwnPropertyNames() 返回对象自身的所有属性的键名 〇 code samples123456789101112131415function Person() &#123; this.name = &quot;Never&quot;;&#125;;// 通过直接的赋值和属性初始化的属性，可枚举性默认为truePerson.prototype.School = &#x27;Tust&#x27;;let person = new Person();// 通过 Object.defineProperty() 等定义的属性，可枚举性默认为falseObject.defineProperty(person, &quot;sex&quot;, &#123; value: &quot;male&quot;, // enumerable: false&#125;); 12345678910111213Object.keys(person).forEach(function(key) &#123; console.log(key) // name&#125;);for(var p in person)&#123; console.log(p); // name, School&#125;Object.getOwnPropertyNames(person).forEach(function(key) &#123; console.log(key)// name, sex&#125;); 如何判断属性是否可枚举 Object.propertyIsEnumerable() 方法可以判断一个属性是否是对象的可枚举的自身属性。（注：如果判断的属性是原型属性，不管它是否可枚举都会返回false） 123person.propertyIsEnumerable(&#x27;name&#x27;); // trueperson.propertyIsEnumerable(&#x27;School&#x27;); // falseperson.propertyIsEnumerable(&#x27;sex&#x27;); // false","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://nevvvver.github.io/categories/JavaScript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://nevvvver.github.io/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://nevvvver.github.io/tags/es6/"}]},{"title":"testcomment","slug":"testcomment","date":"2022-03-09T09:35:39.000Z","updated":"2022-03-09T09:35:39.288Z","comments":true,"path":"2022/03/09/testcomment/","link":"","permalink":"http://nevvvver.github.io/2022/03/09/testcomment/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://nevvvver.github.io/categories/JavaScript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://nevvvver.github.io/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://nevvvver.github.io/tags/es6/"}]}