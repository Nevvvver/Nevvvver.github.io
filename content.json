{"meta":{"title":"Never","subtitle":"","description":"","author":"Never","url":"http://Nevvvver.github.io","root":"/"},"pages":[{"title":"分类","date":"2022-03-14T19:37:47.600Z","updated":"2022-03-14T19:37:47.600Z","comments":false,"path":"categories/index.html","permalink":"http://nevvvver.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-14T19:30:14.438Z","updated":"2022-03-14T19:30:14.438Z","comments":false,"path":"tags/index.html","permalink":"http://nevvvver.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"test","slug":"test","date":"2022-07-12T07:49:35.000Z","updated":"2022-07-12T07:50:02.527Z","comments":true,"path":"2022/07/12/test/","link":"","permalink":"http://nevvvver.github.io/2022/07/12/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"《JavaScript权威指南(第6版)》笔记","slug":"JavaScript权威指南","date":"2022-07-11T09:27:54.000Z","updated":"2022-07-12T07:36:54.953Z","comments":true,"path":"2022/07/11/JavaScript权威指南/","link":"","permalink":"http://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/","excerpt":"","text":"第〇部分第1章 JavaScript概述电子书：《JavaScript权威指南(第6版)》 第一部分 JavaScript 语言核心第2章 词法结构2.1 字符集第9章 类和模块9.1 类和原型 类的所有实例对象都从同一个原型对象上继承属性。 12345// range.js: 实现一个能表示值的范围的类// 这个工厂方法返回一个新的“范围对象”function range(from, to) &#123;&#125; 9.2 类和构造函数1234var F = function()&#123;&#125;; // 这是一个函数对象var p = F.prototype; // 这是F相关联的原型对象var c = p.constructor; // 这是与原型相关联的函数c === F // =&gt; true 对于任意函数 F.prototype.constructor === F","categories":[{"name":"Books","slug":"Books","permalink":"http://nevvvver.github.io/categories/Books/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://nevvvver.github.io/tags/javascript/"}]},{"title":"useReducer+useContext","slug":"useReducer-useContext","date":"2022-06-10T03:08:02.000Z","updated":"2022-07-11T09:21:40.867Z","comments":true,"path":"2022/06/10/useReducer-useContext/","link":"","permalink":"http://nevvvver.github.io/2022/06/10/useReducer-useContext/","excerpt":"","text":"学习的文章The best Couple: useContext + useReducer !Disclaimer: This is going to be one of the best post you have ever come across in search of useContext + useReducer hooks! Why do we use useContext and usereducer together? Reason: To share states between the components i.e. Global StateManagement In the previous posts, we have seen how to make use of useContext and useReducer hooks. So, in this post, we will see how to make use of them together! In this example, we are going to share the state of the counter between Component A , Component D and Component F! Also, the Components hierarchy in our example is as follows: 1.)Component A2.)Component B -&gt; Component D3.)Component C -&gt; Component E -&gt; Component F Steps: 1.) Create React context in the main component 2.) Make reducer function in the main component 3.) Make use of the useReducer function. 4.) Send context value using Context Provider 5.) Consume Context Value using useContext hook. 6.) Transfer action from the components using dispatch Okay so let’s get started! Step1: Create React Context and reducer() function: Step2: In the functional component, call useReducer(reducer,initialState) hook : Here, you can see that we have passed the state i.e. counter and dispatch method as the value in the Context Provider. Step 3: Now, in order to access the global state in Component A, Component D, and Component F, we need to make use of the useContext Hook to consume the context value passed by the Context Provider. (component A)(component D) (component F) Step 4: In order to change the global state through Components A, D, and F, we have passed action (i.e. increment, decrement, or reset) through the dispatch function. This is all you need to manage the global state using useReducer and useContext hook! I hope it might have helped you! Do share your thaughts! *Happy Coding, Thank you! * -Jayant Khandelwal 我的应用背景一个多tab选规则的面板 每个tab下面的规则不一样（规则一样，选的值可以不一样） 但是都是渲染的一个面板 只是切换tab的时候从store里拿不一样的value填进去此时有一个规则组件有校验的问题 只能存在本地 但是state存储无法存储不同tab的校验状态 所以此时用一个本地的对象来存 以每个tab规则的id来作为索引存每一个规则的校验状态比如规则1 是校验失败 规则2是校验成功这个状态是存在state的无法 如果不专门存在store里是无法区分每个规则的 1234567891011121314151617181920212223242526272829303132333435363738394041//rule-context.tsximport React, &#123; Dispatch, useReducer &#125; from &#x27;react&#x27;; type RuleProps = &#123; helpState: Record&lt;string, Record&lt;string, string&gt;&gt;; helpDispatch: Dispatch&lt;&#123; type: string; payload: &#123; id: string;code: string; help: string; flag?: string &#125; &#125;&gt;; &#125;const MdContext = React.createContext&lt;RuleProps&gt;(&#123; helpState: &#123;&#125;, helpDispatch: () =&gt; void 0,&#125;);const reducer = (state: Record&lt;string, Record&lt;string, string&gt;&gt;, action: &#123; type: string; payload: &#123; id: string; code: string; help: string; flag?: string; &#125;;&#125;) =&gt; &#123; switch (action.type) &#123; case &#x27;add&#x27;: return &#123; ...state, [action.payload.id]: &#123; ...state[action.payload.id], [action.payload.code]: action.payload.help, [`$&#123;action.payload.code&#125;Flag`]: action.payload.flag as string, &#125;, &#125;; default: return state; &#125;&#125;;const useHelpRuleReducer = () =&gt; useReducer(reducer, &#123;&#125;);export &#123; MdContext, useHelpRuleReducer &#125;; 1234567891011121314151617```javascript//rule.tsximport &#123; MdContext &#125; from &#x27;rule-context.tsx&#x27;;const &#123; helpState, helpDispatch &#125; = useContext(MdContext);//使用helpDispatch(&#123; type: &#x27;add&#x27;, payload: &#123; code, id, help: &#x27;校验失败&#x27;, &#125;, &#125;);console.log(helpState[id]?.[code])","categories":[{"name":"React","slug":"React","permalink":"http://nevvvver.github.io/categories/React/"}],"tags":[{"name":"react","slug":"react","permalink":"http://nevvvver.github.io/tags/react/"},{"name":"context","slug":"context","permalink":"http://nevvvver.github.io/tags/context/"},{"name":"reducer","slug":"reducer","permalink":"http://nevvvver.github.io/tags/reducer/"},{"name":"hooks","slug":"hooks","permalink":"http://nevvvver.github.io/tags/hooks/"}]},{"title":"jsoneditor-react的类型声明文件","slug":"jsoneditor-react的类型声明文件","date":"2022-06-07T09:25:44.000Z","updated":"2022-06-07T09:46:02.848Z","comments":true,"path":"2022/06/07/jsoneditor-react的类型声明文件/","link":"","permalink":"http://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/","excerpt":"","text":"jsoneditor-react.d.ts放在src下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475declare module &#x27;jsoneditor-react&#x27; &#123; export class JsonEditor extends React.Component&lt;JsonEditorProps&gt; &#123; public jsonEditor: unknown; &#125; type Mode = &#x27;tree&#x27; | &#x27;view&#x27; | &#x27;form&#x27; | &#x27;code&#x27; | &#x27;text&#x27;; interface JsonEditorProps &#123; value: unknown; /** Set the editor mode. Default &#x27;tree&#x27; */ mode?: Mode; /** Initial field name for root node */ name?: string; /** Validate the JSON object against a JSON schema. */ schema: unknown; /** Schemas that are referenced using the $ref property */ schemaRefs?: object; /** * If true, object keys in &#x27;tree&#x27;, &#x27;view&#x27; or &#x27;form&#x27; mode list be listed alphabetically * instead by their insertion order. * */ sortObjectKeys?: boolean; /** Set a callback function triggered when json in the JSONEditor change */ onChange?: (value: object[]) =&gt; void; /** * Set a callback function triggered when an error occurs. * Invoked with the error as first argument. * The callback is only invoked for errors triggered by a users action, * like switching from code mode to tree mode or clicking * the Format button whilst the editor doesn&#x27;t contain valid JSON. */ onError?: (error: unknown) =&gt; void; /** Set a callback function triggered right after the mode is changed by the user. */ onModeChange?: (mode: Mode) =&gt; void; onClassName?: (args: &#123; path: unknown; field: unknown; value: unknown &#125;) =&gt; void; /** Provide a version of the Ace editor. Only applicable when mode is code */ ace?: object; /** Provide a instance of ajv,the library used for JSON schema validation. */ ajv?: object; /** Set the Ace editor theme, uses included &#x27;ace/theme/jsoneditor&#x27; by default. */ theme?: string; /** * Enables history, adds a button Undo and Redo to the menu of the JSONEditor. * Only applicable when mode is &#x27;tree&#x27; or &#x27;form&#x27;. Default to false */ history?: boolean; /** * Adds navigation bar to the menu * the navigation bar visualize the current position on the * tree structure as well as allows breadcrumbs navigation. Default to true */ navigationBar?: boolean; /** * Adds status bar to the buttom of the editor * the status bar shows the cursor position and a count of the selected characters. * Only applicable when mode is &#x27;code&#x27; or &#x27;text&#x27;. Default to true */ statusBar?: boolean; /** Enables a search box in the upper right corner of the JSONEditor. Default to true */ search?: boolean; /** Create a box in the editor menu where the user can switch between the specified modes. */ allowedModes?: Mode[]; /** Html element, or react element to render */ tag?: string | HTMLElement; /** html element custom props */ htmlElementProps?: object; /** callback to get html element reference */ innerRef?: (ref: unknown) =&gt; void; &#125;&#125;","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"http://nevvvver.github.io/categories/TypeScript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://nevvvver.github.io/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://nevvvver.github.io/tags/es6/"}]},{"title":"可枚举性(enumerable)","slug":"enumerable","date":"2022-03-14T18:53:58.000Z","updated":"2022-03-15T16:09:02.657Z","comments":true,"path":"2022/03/15/enumerable/","link":"","permalink":"http://nevvvver.github.io/2022/03/15/enumerable/","excerpt":"","text":"描述 在 JavaScript 中，对象的属性可以分为实例属性和原型 (prototype) 属性。 实例属性：指的是自身属性。 原型属性：指的是从原型链上继承的属性。 Object.prototype.hasOwnProperty() 可以判断某一个属性是否是对象的自身属性。 对象的每一个属性都有一个描述对象 (Descriptor) ,描述对象的 enumerable 属性称为“可枚举性”。 引入“可枚举性”这个概念的最初目的，就是让某些属性可以规避掉 for...in 操作。 可枚举性的作用与可枚举性有关的操作： 函数方法 描述 实例属性 原型属性 for...in 遍历对象自身和原型上的所有可枚举属性 〇 〇 Object.keys() 返回对象自身的所有可枚举属性的键名 〇 JSON.stringify 只串行化对象自身的所有可枚举属性 〇 Object.assign()(ES6) 只拷贝对象自身的所有可枚举属性 〇 Object.getOwnPropertyNames() 返回对象自身的所有属性的键名 〇 code samples123456789101112131415function Person() &#123; this.name = &quot;Never&quot;;&#125;;// 通过直接的赋值和属性初始化的属性，可枚举性默认为truePerson.prototype.School = &#x27;Tust&#x27;;let person = new Person();// 通过 Object.defineProperty() 等定义的属性，可枚举性默认为falseObject.defineProperty(person, &quot;sex&quot;, &#123; value: &quot;male&quot;, // enumerable: false&#125;); 12345678910111213Object.keys(person).forEach(function(key) &#123; console.log(key) // name&#125;);for(var p in person)&#123; console.log(p); // name, School&#125;Object.getOwnPropertyNames(person).forEach(function(key) &#123; console.log(key)// name, sex&#125;); 如何判断属性是否可枚举 Object.propertyIsEnumerable() 方法可以判断一个属性是否是对象的可枚举的自身属性。（注：如果判断的属性是原型属性，不管它是否可枚举都会返回false） 123person.propertyIsEnumerable(&#x27;name&#x27;); // trueperson.propertyIsEnumerable(&#x27;School&#x27;); // falseperson.propertyIsEnumerable(&#x27;sex&#x27;); // false","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://nevvvver.github.io/categories/JavaScript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://nevvvver.github.io/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://nevvvver.github.io/tags/es6/"}]},{"title":"testcomment","slug":"testcomment","date":"2022-03-09T09:35:39.000Z","updated":"2022-03-09T09:35:39.288Z","comments":true,"path":"2022/03/09/testcomment/","link":"","permalink":"http://nevvvver.github.io/2022/03/09/testcomment/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[{"name":"Books","slug":"Books","permalink":"http://nevvvver.github.io/categories/Books/"},{"name":"React","slug":"React","permalink":"http://nevvvver.github.io/categories/React/"},{"name":"TypeScript","slug":"TypeScript","permalink":"http://nevvvver.github.io/categories/TypeScript/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://nevvvver.github.io/categories/JavaScript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://nevvvver.github.io/tags/javascript/"},{"name":"react","slug":"react","permalink":"http://nevvvver.github.io/tags/react/"},{"name":"context","slug":"context","permalink":"http://nevvvver.github.io/tags/context/"},{"name":"reducer","slug":"reducer","permalink":"http://nevvvver.github.io/tags/reducer/"},{"name":"hooks","slug":"hooks","permalink":"http://nevvvver.github.io/tags/hooks/"},{"name":"es6","slug":"es6","permalink":"http://nevvvver.github.io/tags/es6/"}]}