<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never</title>
  
  
  <link href="https://nevvvver.github.io/atom.xml" rel="self"/>
  
  <link href="https://nevvvver.github.io/"/>
  <updated>2022-10-13T09:41:52.834Z</updated>
  <id>https://nevvvver.github.io/</id>
  
  <author>
    <name>Never</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack5新特性</title>
    <link href="https://nevvvver.github.io/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://nevvvver.github.io/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2022-09-15T09:35:49.000Z</published>
    <updated>2022-10-13T09:41:52.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-启动命令"><a href="#1-启动命令" class="headerlink" title="1 启动命令"></a>1 启动命令</h3><ul><li>webpack4 启动 devServer，用的命令是 <code>webpack-dev-server</code></li><li>webpack5 启动 devServer，用的命令是 <code>webpack serve</code></li></ul><hr><h3 id="2-持久化缓存"><a href="#2-持久化缓存" class="headerlink" title="2 持久化缓存"></a>2 持久化缓存</h3><p>持久化缓存是 webpack5 所带来的非常强大的特性之一。 webpack5 通过将构建结果持久化缓存到本地磁盘，使之在二次构建时可以直接利用磁盘缓存跳过构建过程当中耗时的流程，大大提升编译构建的效率，优化编译流程。</p><h4 id="之前的持久缓存方式"><a href="#之前的持久缓存方式" class="headerlink" title="之前的持久缓存方式"></a>之前的持久缓存方式</h4><ul><li>使用 cache-loader 可以将上一个 loader 处理的结果写入硬盘缓存（默认在 node_modules&#x2F;.cache&#x2F;cache-loader 目录），webpack 再次构建时如果文件没有发生变化则会直接拉取缓存。但是 cache-loader 缓存是在构建流程当中进行的 只能覆盖由 loader 处理后的文件内容，缓存数据的过程也是有一些性能开销的，也会影响整个的编译构建速度，所以搭配编译耗时较长的 loader 一起使用更划算。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;cache-loader&#x27;</span>, <span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>还有一部分 loader 自带缓存配置，比如 babel-loader，可以配置参数 cacheDirectory 使用缓存，将每次的编译结果写进磁盘（默认在 node_modules&#x2F;.cache&#x2F;babel-loader 目录）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>terser-webpack-plugin 开启缓存</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">cache</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>eslint-loader 同样支持缓存功能，只需设置 cache &#x3D; true 即可开启。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="webpack5-的持久缓存方式"><a href="#webpack5-的持久缓存方式" class="headerlink" title="webpack5 的持久缓存方式"></a>webpack5 的持久缓存方式</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>如下图，是 Webpack5 的构建过程，在首次构建完毕后，会将 Module、Chunk、ModuleGraph 等对象序列化后记录到缓存文件中。构建过程中存在许多 CPU 密集型操作，例如调用 Loader 链加载文件时，遇到 babel-loader、eslint-loader、ts-loader 等工具时可能需要重复生成 AST；分析模块依赖信息时则需要遍历 AST，执行大量运算；生成（Seal）阶段也同样存在大量 AST 遍历，以及代码转换、优化操作等等。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-180941.png"></p><p>在下次构建开始时，尝试读入并恢复这些序列化对象的状态，从而跳过执行 Loader 链、解析 AST、解析依赖等耗时操作，提高编译性能。未发生变化的文件就可以跳过编译操作，直接使用缓存副本，减少重复计算；发生变更的模块则重新执行编译流程。缓存执行时机如下图：</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-182839.png"></p><h5 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h5><p>cache 在 Webpack 4 中只是单个属性的配置，所对应的值为 true 或 false，而在webpack5增加了许多子配置项。默认不开启。</p><p>下面介绍几个 cache 常用的配置项：</p><ol><li><code>cache.type</code>：缓存类型。支持 ‘memory’ | ‘filesystem’，分别代表基于内存的临时缓存，以及基于文件系统的持久化缓存。在选择 filesystem 的情况下，下面介绍的其他属性生效。</li><li><code>cache.cacheDirectory</code>：缓存文件存放的路径。默认目录为 node_modules&#x2F;.cache&#x2F;webpack</li><li><code>cache.name</code>：缓存名称。同时也是 cacheDirectory 中的子目录名称，默认值为 webpack 的 <code>$&#123;config.name&#125;-$&#123;config.mode&#125;</code></li><li><code>cache.buildDependencies</code>：额外的依赖文件，当这些文件内容发生变化时，缓存会完全失效而执行完整的编译构建，通常可设置为项目配置文件。</li><li><code>cache.version</code>：缓存数据的版本。</li><li><code>cache.managedPaths</code>：受控目录，Webpack 构建时会跳过新旧代码哈希值与时间戳的对比，直接使用缓存副本，默认值为 [‘.&#x2F;node_modules’]</li><li><code>cache.profile</code>：是否输出缓存处理过程的详细日志，默认为 false</li><li><code>cache.maxAge</code>：缓存失效时间，默认值为1个月</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;filesystem&#x27;</span>,<span class="comment">// &#x27;memory&#x27; | &#x27;filesystem&#x27;</span></span><br><span class="line">    <span class="attr">cacheDirectory</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;node_modules/.cache/webpack&#x27;</span>)</span><br><span class="line">    <span class="attr">buildDependencies</span>: &#123;</span><br><span class="line">      <span class="attr">config</span>: [__filename],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更多关于 cache 的配置可<a href="https://webpack.docschina.org/configuration/cache/">前往官网</a></p><h5 id="内容哈希（contentHash）"><a href="#内容哈希（contentHash）" class="headerlink" title="内容哈希（contentHash）"></a>内容哈希（contentHash）</h5><p>在 webpack5 里会使用文件内容的真实哈希 <code>[contenthash]</code>，而不是之前的仅仅使用文件内部结构的哈希，这对于长期缓存有着积极的影响，尤其是代码里面只有注释和变量名修改的时候，webpack5 会继续用之前的缓存而不是重新编译。</p><p>如下，在 webpack4 中使用 <code>[contenthash]</code> 修改注释后虽然文件内容没变但是却重新编译生成了新的哈希。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220918-023302.png"></p><p>在 webpack5 中我们对如下文件进行编译，这是第一次生成的<code>[contenthash]</code></p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-143840.png"></p><p>更改变量名再次编译，可以看到我们的哈希值并没有变化</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-144226.png"><br>修改注释再次编译，可以看到我们的哈希值仍然没有变化</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-144319.png"></p><h5 id="moduleIds-amp-chunkIds-的优化"><a href="#moduleIds-amp-chunkIds-的优化" class="headerlink" title="moduleIds &amp; chunkIds 的优化"></a>moduleIds &amp; chunkIds 的优化</h5><p>在 webpack5 之前，没有从 entry 打包的 chunk 文件，都会以1、2、3…的文件命名方式输出，是自增的，删除某些文件可能会导致缓存失效。<br>如下图所示，打包后的文件名1、2、3分别对应 <code>ModuleA</code>、<code>ModuleC</code>、<code>ModuleC</code></p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-163631.png"></p><p>若我们不引入 <code>ModuleB</code>，你会发现 1、2 分别对应着<code>ModuleA</code>、<code>ModuleC</code>，这是不稳定的。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-163702.png"></p><p>webpack5 新增了长期缓存的算法，在生产模式下是默认启用的。此算法采用确定性的方式将短数字 ID(3 或 4 个字符)短hash值分配给 modules 和 chunks。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">chunkIds</span>: <span class="string">&quot;deterministic&quot;</span> </span><br><span class="line">  <span class="attr">moduleIds</span>: <span class="string">&quot;deterministic&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图所示，打包后的文件名664、300、761分别对应 <code>ModuleA</code>、<code>ModuleC</code>、<code>ModuleC</code></p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-163442.png"></p><p>若我们不引入 <code>ModuleB</code>，你会发现 664、761 分别对应着<code>ModuleA</code>、<code>ModuleC</code>，是确定的。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220921-154544.png"></p><h5 id="单个模块的缓存失效"><a href="#单个模块的缓存失效" class="headerlink" title="单个模块的缓存失效"></a>单个模块的缓存失效</h5><p>Webpack 5 会跟踪每个模块的依赖项：fileDependencies、contextDependencies、missingDependencies。当模块本身或其依赖项发生变更时，Webpack 能找到所有受影响的模块，并重新进行构建处理。</p><p>这里需要注意的是，对于 node_modules 中的第三方依赖包中的模块，出于性能考虑，Webpack 不会跟踪具体模块文件的内容和修改时间，而是依据依赖包里package.json 的 name 和 version 字段来判断模块是否发生变更。因此，单纯修改 node_modules 中的模块内容，在构建时不会触发缓存的失效。</p><h5 id="全局缓存失效"><a href="#全局缓存失效" class="headerlink" title="全局缓存失效"></a>全局缓存失效</h5><p>当模块代码没有发生变化，但是构建处理过程本身发生变化时（例如升级了 Webpack 版本、修改了配置文件、改变了环境变量等），也可能对构建后的产物代码产生影响。因此在这种情况下不能复用之前缓存的数据，而需要让全局缓存失效，重新构建并生成新的缓存。在 Webpack 5 中共提供了 3 种不同维度的全局缓存失效配置。</p><p><strong>1. buildDependencies</strong></p><p>第一种配置是 <code>cache.buildDependencies</code>，用于指定可能对构建过程产生影响的依赖项。</p><p><code>&#123;defaultWebpack: [&quot;webpack/lib&quot;]&#125;</code>: 默认选项。当 node_modules 中的 Webpack 或 Webpack 的依赖项（例如 watchpack 等）发生变化时，当前的构建缓存即失效。</p><p><code>&#123;config: [__filename]&#125;</code>: 它的作用是当配置文件内容或配置文件依赖的模块文件发生变化时，当前的构建缓存即失效。</p><p><strong>2. version</strong></p><p>第二种配置是 <code>cache.version</code>。当配置文件和代码都没有发生变化，但是构建的外部依赖（如环境变量）发生变化时，预期的构建产物代码也可能不同。这时就可以使用 <code>version</code> 配置来防止在外部依赖不同的情况下混用了相同的缓存。</p><p>例如，你的 config 读取环境变量 GIT_REV 并且使用 DefinePlugin 来嵌入打包. 我们就可以将 GIT_REV 作为依赖。可以传入 <code>cache: &#123;version: process.env.GIT_REV&#125;</code>。</p><p><strong>3. name</strong></p><p>第二种配置是 <code>cache.name</code>。该名称除了作为默认缓存目录下子目录的名称外，也起到区分缓存数据的作用。<br>例如，可以传入 <code>cache: &#123;name: process.env.NODE_ENV&#125;</code>。</p><p>需要注意的是: 与 <code>version</code> 或 <code>buildDependencies</code> 等配置不同，<code>name</code> 在默认情况下是作为缓存的子目录名称存在的，因此可以利用 <code>name</code> 保留多套缓存。在 <code>name</code> 切换时，若已存在同名称的缓存，则可以复用之前的缓存。如下，可以通过 <code>name</code> 保存多套缓存。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-233153.png"></p><p>与之相比，当其他配置发生变化时，会直接将之前的缓存失效，即使切换回之前已缓存过的设置，也会当作无缓存处理。</p><h4 id="构建结果对比"><a href="#构建结果对比" class="headerlink" title="构建结果对比"></a>构建结果对比</h4><h5 id="Webpack4"><a href="#Webpack4" class="headerlink" title="Webpack4"></a>Webpack4</h5><p>首次编译<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-194702.png"></p><p>二次编译<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-194814.png"></p><p>修改 index.js 的一行代码<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-200742.png"></p><p>devServer 启动<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-195033.png"></p><p>不关闭 devServer 修改index.js的一行代码</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-195133.png"></p><h5 id="Webpack5"><a href="#Webpack5" class="headerlink" title="Webpack5"></a>Webpack5</h5><p>首次编译<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-223519.png"></p><p>二次编译<br>可以看到第二次编译时一共149个 modules 全部来自缓存<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-193330.png"></p><p>修改 index.js 的一行代码<br>可以看到除了 index.js 重新构建外，其他的140个 modules 全部来自缓存<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-193454.png"></p><p>devServer 启动<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-195416.png"></p><p>不关闭 devServer 修改 index.js 的一行代码<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220917-195310.png"></p><h5 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h5><table><thead><tr><th>webpack版本</th><th>首次编译</th><th>无改动二次编译</th><th>修改后的二次编译</th><th>启动server</th><th>修改后的二次编译</th></tr></thead><tbody><tr><td>v4</td><td>2919ms</td><td>1392ms</td><td>2467ms</td><td>3944ms</td><td>2396ms</td></tr><tr><td>v5</td><td>3793ms</td><td>658ms</td><td>1094ms</td><td>2500ms</td><td>72ms</td></tr></tbody></table><p>webpack5 相对于 webpack4，首次构建速度的会慢一些，因为 webpack5 还需要进行缓存相关的操作。但是我们可以看到在无修改的二次编译时 webpack5 相较于 webpack4 速度大大提升，快了近52%。在 devServer 中的增量编译效果更明显，快了近97%，因为 server 在启动后的编译无需再初始化了（如 loader、plugin 的初始化），所以速度更快。我进行这个实验的代码量很少，相信在庞大的项目中还会有更好的效果。</p><hr><h3 id="3-资源模块"><a href="#3-资源模块" class="headerlink" title="3 资源模块"></a>3 资源模块</h3><p>资源模块是一种模块类型，Webpack5 提供了内置的静态资源（图片、字体、图标等）构建能力，我们不需要安装额外的 loader，仅需要简单的配置就能实现静态资源的打包和分目录存放。</p><p>在 Webpack5 之前，我们一般都会使用以下几个 loader 来处理一些常见的静态资源：</p><ul><li><code>raw-loader</code>：将文件导入为字符串。</li><li><code>file-loader</code>：将文件打包导到输出目录，并在 import 的时候返回一个文件的 URI 将文件作为 data URI 内联到 bundle 中。</li><li><code>url-loader</code>：当文件大小达到一定要求的时候，可以将其处理成 base64 的 URIS ，内置 file-loader，将文件发送到输出目录。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(png|gif|jpe?g)$/i</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="comment">// loader: &#x27;file-loader&#x27;,</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 指定图片大小，小于该数值的图片，会被转成 base64</span></span><br><span class="line">          <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>, <span class="comment">// 8kb</span></span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;image/[name].[ext]&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><ul><li><code>asset/resource</code> 发送一个单独的文件并导出URL。之前通过使用 file-loader 实现。</li><li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 url-loader 实现。</li><li><code>asset/source</code> 导出资源的源代码。之前通过使用 raw-loader 实现。</li><li><code>asset</code> 可以在导出一个 data URI 和 发送一个单独的文件之间自动选择，可以通过parser配置资源体积限制。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(png|gif|jpe?g)$/i</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,  </span><br><span class="line">      <span class="comment">// 现在，webpack 将按照默认条件，自动地在 resource 和 inline 之间进行选择：</span></span><br><span class="line">      <span class="comment">// 小于 8kb 的文件，将会视为 inline 模块类型，否则会被视为 resource 模块类型。</span></span><br><span class="line">      <span class="comment">// 自定义设置</span></span><br><span class="line">      <span class="attr">parser</span>: &#123;</span><br><span class="line">        <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">          <span class="attr">maxSize</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">generator</span>: &#123;</span><br><span class="line">        <span class="comment">// 该[ext]已经包含了一个点</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;image/[name][ext]&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外 webpack 输出的 data URI 默认是使用 base64 算法编码的文件内容，如果要使用自定义编码算法，可以指定一个自定义函数来编码文件的内容，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> svgToMiniDataURI = <span class="built_in">require</span>(<span class="string">&#x27;mini-svg-data-uri&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>:<span class="regexp">/\.svg/</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;asset/inline&#x27;</span>,</span><br><span class="line">      <span class="attr">generator</span>: &#123;</span><br><span class="line">        <span class="attr">dataUrl</span>: <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">          content = content.<span class="title function_">toString</span>();</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">svgToMiniDataURI</span>(content);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更多关于资源模块的配置可<a href="https://webpack.docschina.org/guides/asset-modules/">前往官网</a></p><hr><h3 id="4-更智能的-tree-shaking"><a href="#4-更智能的-tree-shaking" class="headerlink" title="4 更智能的 tree shaking"></a>4 更智能的 tree shaking</h3><p>Tree Shaking 通常用于描述移除 JavaScript 上下文中的未引用代码 (dead-code)。以达到减小体积，缩短 http 请求时间，起到一定效果的页面优化。</p><h4 id="webpack4-中-Tree-Shaking-的局限性"><a href="#webpack4-中-Tree-Shaking-的局限性" class="headerlink" title="webpack4 中 Tree Shaking 的局限性"></a>webpack4 中 Tree Shaking 的局限性</h4><ul><li><p>引入的模块需要是 ES6 类型的，CommonJS 类型的则不支持。</p></li><li><p>引入方式不能使用 <code>default</code>。<code>export default</code> 会导致 Tree Shaking 失败，简单来说就是 <code>export default</code> 打包后会作为一个对象整体。webpack 只会分析顶层对象的使用情况，并不会分析对象中的属性，所以 <code>export default</code> 要么就是整体引入，要么就是整体删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/inner_module.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;inner_a&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;inner_b&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; a , b &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner-module&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inner.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220922-231248.png"><br>没有使用 <code>export default</code>，可以正常进行 Tree Shaking，产物中只剩下 <code>inner_b</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/inner_module.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;inner_a&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;inner_b&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; a , b &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="keyword">import</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner-module&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inner.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220922-231015.png"><br>使用 <code>export default</code>后，Tree Shaking 失效，产物中留下了 <code>inner_a</code>、<code>inner_b</code>。</p></li><li><p>webpack4 主要是找 <code>import</code> 进来的变量是否在这个模块内出现过，出现过的不剔除，剔除没出现过的。这种方式往往作用不大，因为一般不会去 <code>import</code> 一个没有用到的变量。现在的编辑器和 lint 工具都会提示你去删掉无用的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./index.js（入口文件）</span></span><br><span class="line"><span class="keyword">import</span> &#123; cube &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cube</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./math.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; pow &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pow</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cube</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./utils.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">plus</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220923-113931.png"><br>以上是对应的依赖关系图和打包后的产物，根据 <code>import</code> 进来的变量是否在这个模块内出现过的原理分析，这里 <code>cube</code> 在 <code>./index</code> 中被用到，会被打包。而 <code>pow</code> 在 <code>./math.js</code> 中被用到，也会被打包。但实际上从入口 <code>./index.js</code> 来看的话，<code>pow</code> 并不需要，因为依赖 <code>pow</code> 的 <code>square</code> 并没有被用到。但是 webpack 并不知道这一点，因为它没有做相应的作用域分析，去判断模块中导出内容与导入内容间的连接关系。</p></li><li><p>引用第三方依赖包的情况下，对应的 package.json 需要设置 <code>sideEffects: false</code> 来表明无副作用。webpack4 默认地将所有代码视为有副作用，这可以保护你免于删除必要的文件，但这意味着 webpack4 的默认行为实际上是不进行  Tree Shaking。</p></li></ul><h4 id="webpack5-的-TreeShaking"><a href="#webpack5-的-TreeShaking" class="headerlink" title="webpack5 的 TreeShaking"></a>webpack5 的 TreeShaking</h4><p>webpack5 的 Tree Shaking 更精细化，可以根据作用域之间的关系来进行优化，分析模块的引用关系。直接分析到哪些变量有效地用到了，就打包哪些变量。</p><h5 id="usedExports"><a href="#usedExports" class="headerlink" title="usedExports"></a>usedExports</h5><p>在 Webpack5 中，Tree Shaking 在生产环境下默认启动（<code>usedExports</code> + <code>Terser</code>）。</p><p>如果想在开发环境启动 Tree Shaking，需要如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  usedExports : <span class="literal">true</span> <span class="comment">// 标记出未被导出的变量 &quot;unused harmony export&quot;</span></span><br><span class="line">  minimize : <span class="literal">true</span> <span class="comment">// 去除无用变量并压缩代码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认使用 Terser 进行压缩，也允许你定制自己的压缩工具</span></span><br><span class="line">  <span class="comment">// minimize = true 时，配置才生效</span></span><br><span class="line">  <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">TerserPlugin</span>()] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>usedExports</code> 用于在 webpack 编译过程中启动标记功能，它会将每个模块中没有被使用过的导出内容标记为 unused，然后配合 Terser 将没用的函数在打包的时候删掉（会删除导出语句和这个模块）。可以说，真正执行 Tree Shaking 操作的是 Terser 插件。webpack5 内置了 terser-webpack-plugin 插件，无需自己安装。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220923-151006.png"></p><h5 id="sideEffects"><a href="#sideEffects" class="headerlink" title="sideEffects"></a>sideEffects</h5><p>导出后没有使用，只是做了一个 <code>import</code>，那么这个 <code>import</code> 是没意义的，所以这个 <code>import</code> 语句 和 <code>import</code> 的文件都应该被去掉，这就要用到 <code>sideEffects</code>。</p><p>side effect（副作用）指当调用函数时，除了返回函数值之外，还产生了附加的影响（例如修改全局变量等），不能仅仅通过 <code>export</code> 判断有无意义。因此实现 Tree shaking 还有一个方式是跳过整个模块&#x2F;文件，直接查看该文件是否有副作用。<code>sideEffects</code> 就是用于告知 webpack 哪些模块具有副作用。</p><p><code>sideEffects</code> 可配置在 package.json 和 webpack 中</p><ul><li><p>在 webpack 中配置<br>表示是否开启副作用功能。告知 webpack 去辨识 package.json 中的副作用标记或规则，以去掉那些导出不被使用且被标记不包含副作用的模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="comment">// 以下配置可以开启副作用功能 </span></span><br><span class="line">  <span class="comment">// 在开发模式下默认关闭（生产模式默认开启）</span></span><br><span class="line">  <span class="attr">sideEffects</span>: <span class="literal">true</span> <span class="comment">// true | false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 package.json 中配置<br><code>true</code>：（默认值）这意味着所有的文件都有副作用，没有一个文件可以 Tree shaking。<br><code>false</code>：告诉 Webpack 所有文件都没有副作用，所有文件都可以 Tree shaking。<br><code>数组</code>：除了数组中包含的文件外，其他任何文件都没有副作用。除了指定的文件之外，其他文件都可以安全地进行 Tree shaking。</p></li></ul><p>例如全局 css 样式，<code>import</code> 了但没有使用，若设置了 <code>sideEffect: false</code> 就会被认为没有副作用且被删掉，所以我们可以配置  <code>sideEffect: [&quot;**.css&quot;]</code></p><p>要设置 css 文件有副作用还可以在 webpack 里的 loader 中进行配置，如下代码就可以指定所有的 css 都是有副作用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">    <span class="attr">use</span>:[],</span><br><span class="line">    <span class="attr">sideEffects</span>: <span class="literal">true</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Nested-Tree-Shaking"><a href="#Nested-Tree-Shaking" class="headerlink" title="Nested Tree Shaking"></a>Nested Tree Shaking</h5><p>webpack5 增加了对嵌套模块的导出跟踪功能，能够找到那些嵌套在最内层而未被使用的模块属性。例如下面的示例代码，webpack5 能够跟踪对导出的嵌套属性的访问，因此可以改善重新导出命名空间对象时的 Tree Shaking。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/inner-module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&#x27;inner_a&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&#x27;inner_b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.src/nested-module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner-module&#x27;</span></span><br><span class="line"><span class="keyword">const</span> nested = <span class="string">&#x27;nested&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; inner, nested &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//./src/index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> nested <span class="keyword">from</span> <span class="string">&#x27;./nested-module&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested.<span class="property">inner</span>.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220922-190236.png"></p><p>这是在 webpack4 生产环境执行的构建，可以看到 <code>inner_a</code>、<code>inner_b</code> 都被保留了，这是因为在 nested-module 中，他们作为一个整体被 <code>import</code> ，且被使用了（被<code> export</code> 了）。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220922-165432.png"></p><p>这是在 webpack5 生产环境执行的构建，在构建后的结果代码中只包含了引用的内部模块的一个属性 <code>inner_a</code>，而忽略了不被引用的内部模块和中间模块的其他属性。</p><h5 id="Inner-Module-Tree-Shaking"><a href="#Inner-Module-Tree-Shaking" class="headerlink" title="Inner Module Tree Shaking"></a>Inner Module Tree Shaking</h5><p>除了上面对嵌套引用模块的依赖分析优化外，webpack5 中还增加了分析模块中导出项与导入项的依赖关系的功能，即上面提到的作用域分析，从而找到更多未被使用的导入模块并加以移除。通过选项 <code>optimization.innerGraph</code> 进行配置，该选项在生产环境下默认开启，在开发环境下默认关闭。</p><p>在 webpack5 开发环境下构建下面的示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/inner-module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&#x27;inner_a&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&#x27;inner_b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.src/nested-module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner-module&#x27;</span></span><br><span class="line"><span class="keyword">const</span> nested = <span class="string">&#x27;nested&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; inner, nested &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加下面代码</span></span><br><span class="line"><span class="keyword">const</span> useB = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> inner.<span class="property">b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> usingB = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useB</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//./src/index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> nested <span class="keyword">from</span> <span class="string">&#x27;./nested-module&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested.<span class="property">inner</span>.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><p><code>optimization.usedExports = true</code><br><code>optimization.innerGraph = false</code>（默认）<br><code>optimization.minimize = true</code></p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220923-020000.png"></p><p><code>optimization.usedExports = true</code><br><code>optimization.innerGraph = true</code><br><code>optimization.minimize = true</code></p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220923-020034.png"></p><p>当我们在 nested-module.js 中新增了导出项 <code>usingB</code>，该导出项间接依赖导入项 <code>inner.b</code>，而这一导出项在入口模块中并未使用。在关闭 <code>innerGraph</code> 的情况下，构建后会发现间接引用的导出项没有被移除，该导出项间接引用的 <code>inner.b</code> 也被保留到了产物代码中。但是如果将优化项 <code>innerGraph</code> 开启，构建完成后只保留真正被使用的 <code>inner.a</code>。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220923-114858.png"></p><p>它从入口遍历所有模块形成依赖图，并将它们捆绑在一起（bundles）。同时，webpack 知道那些导出被使用。不如我们遍历所有的作用域并将其进行分析，消除未使用的范围和模块的方法。事实上，我们可以把 scope 看作是图中的一个节点。</p><p>将上面的代码在 webpack5 中打包，square 和 pow 相关，但如果 square 不会由另一个模块导入，那么 square 连同 pow 都会被消除，可以看到在产物中 <code>pow</code> 和 <code>plus</code>都被标记为 unused。</p><h5 id="CommonJS-Tree-Shaking"><a href="#CommonJS-Tree-Shaking" class="headerlink" title="CommonJS Tree Shaking"></a>CommonJS Tree Shaking</h5><p>webpack5 中增加了对一些 CommonJS 风格模块代码的静态分析功功能：</p><ul><li>支持 <code>exports.xxx</code>、<code>this.exports.xxx</code>、<code>module.exports.xxx</code> 语法的导出分析。</li><li>支持 <code>Object.defineProperty(exports, &quot;xxxx&quot;, ...)</code> 语法的导出分析。</li><li>支持 <code>require(&#39;xxxx&#39;).xxx</code> 语法的导入分析。</li></ul><p>例如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./src/module.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">11</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">exports</span>.<span class="property">b</span> = <span class="number">22</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">c</span> = <span class="number">33</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;module&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//./src/index.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>).<span class="property">a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220923-014047.png"></p><p>可以看到产物代码中只有被引入的属性 <code>a</code> 和 <code>console</code> 语句，而其他两个导出属性 <code>b</code> 和 <code>c</code> 已经在产物中被排除了。</p><hr><h3 id="5-nodeJs的polyfill脚本被移除"><a href="#5-nodeJs的polyfill脚本被移除" class="headerlink" title="5 nodeJs的polyfill脚本被移除"></a>5 nodeJs的polyfill脚本被移除</h3><p>webpack5 以前，webpack 会包含 nodejs 核心模块的 polyfill，这样的话，比如安装了一个crypto模块，那么就可以直接使用，因为 node 的polyfill会自动启动。</p><p>现在 webpack5 不再为 Node.js 模块自动引用 Polyfills（Polyfills是一个语法检查的模版工具），需要手动添加适合的 Polyfills。</p><p>如果你想要使用类似 crypto 的 nodejs 核心模块，那么可以在 webpack 配置文件的 <code>resolve</code> 中配置 <code>fallback</code>，配置了就可以使用了，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">fallback</span>:  &#123;</span><br><span class="line">            <span class="comment">// 如果不需要，直接改为 false 就可以了</span></span><br><span class="line">            <span class="string">&quot;crypto&quot;</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;crypto-browserify&quot;</span>), </span><br><span class="line">            <span class="string">&quot;buffer&quot;</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;buffer&quot;</span>),</span><br><span class="line">            <span class="string">&quot;stream&quot;</span>:<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;stream-browserify&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-模块联邦（Module-Federation）"><a href="#6-模块联邦（Module-Federation）" class="headerlink" title="6 模块联邦（Module Federation）"></a>6 模块联邦（Module Federation）</h3><p><a href="https://webpack.docschina.org/concepts/module-federation/">https://webpack.docschina.org/concepts/module-federation/</a><br>模块联邦是 webpack5 新内置的一个重要功能，它允许多个 webpack 一起工作，可以让跨应用间真正做到模块共享。解决了独立应用之间代码共享问题，能在项目内动态加载其他项目的代码，因此每个项目可以单独开发和部署它们。</p><p>模块联邦本身是一个普通的 webpack 插件 ModuleFederationPlugin，这个插件有几个重要参数：<br><code>name</code> 当前应用名称。（供调用方使用）<br><code>filename</code> 打包后的文件名称。（供调用方使用）<br><code>exposes</code> 表示导出的模块，只有在此申明的模块才可以作为远程依赖被使用。（暴露模块）<br><code>remotes</code> 导入模块，可以将其他项目的 name 映射到当前项目中。（模块使用方）<br><code>shared</code> 是非常重要的参数，可以配置共享的组件，一般是对第三方库做共享使用。如果配置了这个属性。webpack 在加载的时候会先判断本地应用是否存在对应的包，如果不存在，则加载远程应用的依赖包。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-175522.png"></p><h4 id="实操案例解析"><a href="#实操案例解析" class="headerlink" title="实操案例解析"></a>实操案例解析</h4><p>我们先创建两个应用 app1、app2：我们让 app1 作为模块提供方（remote），而 app2 就作为模块的消费方（host）。</p><p>并导出，在app2中分别引入app1的这两个组件。</p><p><strong>app1</strong></p><p>在 app1 中定义两个组件 <code>sitename</code> 和 <code>info</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="keyword">import</span> sitename <span class="keyword">from</span> <span class="string">&#x27;./sitename&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="title function_">siteName</span>(<span class="string">&#x27;APP1&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/sitename.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (name) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;来自App1的模块：sitename&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h3&#x27;</span>);</span><br><span class="line">  ele.<span class="property">textContent</span> = name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;来自App1的模块：info&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h3&#x27;</span>);</span><br><span class="line">    ele.<span class="property">textContent</span> = <span class="string">&#x27;模块联邦是 webpack5 新内置的一个重要功能，</span></span><br><span class="line"><span class="string">    它允许多个 webpack 一起工作，可以让跨应用间真正做到模块共享。&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 webpack.config.js 文件，将 <code>sitename</code> 和 <code>info</code> 暴露出去，以便提供给消费方使用，配置文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mfp</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>).<span class="property">container</span>.<span class="property">ModuleFederationPlugin</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 开发服务器</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;output&#x27;</span>),</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8800</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Mfp</span>(&#123;</span><br><span class="line">      <span class="comment">// 应用名称（给调用方使用）</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;app1_remote&#x27;</span>,</span><br><span class="line">      <span class="comment">// 调用方引入的文件名称</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;app1.js&#x27;</span>,</span><br><span class="line">      <span class="comment">// 暴露模块</span></span><br><span class="line">      <span class="attr">exposes</span>: &#123;</span><br><span class="line">        <span class="comment">// 模块名称：模块文件路径</span></span><br><span class="line">        <span class="string">&#x27;./sitename&#x27;</span>: <span class="string">&#x27;./src/sitename.js&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;./info&#x27;</span>: <span class="string">&#x27;./src/info.js&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>app2</strong></p><p>创建 webpack.config.js 文件，在 remotes 中引入 app1 中的模块 app1_remote：<code>app1_remote@http://localhost:8800/app1.js</code>，app1_remote 需要和 app1 中配置的 name 一致，这个是唯一标识。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 开发服务器</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">static</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;output&#x27;</span>),</span><br><span class="line">  <span class="attr">port</span>: <span class="number">8801</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 插件配置</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Mfp</span>(&#123;</span><br><span class="line">    <span class="comment">// 导入模块</span></span><br><span class="line">    <span class="attr">remotes</span>: &#123;</span><br><span class="line">      <span class="comment">// 导入别名: 远程应用名称@远程应用地址/远程导出文件的名称</span></span><br><span class="line">      <span class="attr">appone</span>: <span class="string">&quot;app1_remote@http://localhost:8800/app1.js&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 app2 中异步引入这两个组件 <code>sitename</code> 和 <code>info</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;appone/sitename&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> title = res.<span class="title function_">default</span>(<span class="string">&#x27;在APP2中用sitename创建的&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(title);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;appone/info&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> title = res.<span class="title function_">default</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(title);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们分别启动这两个应用：<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220924-205917.png"></p><p>app1的页面<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-044216.png"><br>app2的页面<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-044343.png"><br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-041401.png"></p><p>热插拔：在不关闭 server 的情况下 我们在 app1 中改动 <code>sitename</code> 模块中的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/sitename.js</span></span><br><span class="line">...</span><br><span class="line">ele.<span class="property">textContent</span> = name + <span class="string">&#x27;我改动了&#x27;</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后刷新 app2 的页面会发现页面已经及时更新了。<br><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220924-211510.png"></p><p><strong>公共库的提取</strong></p><p>首先我们在 app1 的 <code>sitename</code> 组件中使用 <code>jquery</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/sitename.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (name) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;来自App1的模块：sitename&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h3&#x27;</span>);</span><br><span class="line">    ele.<span class="property">textContent</span> = name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入下面代码</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&#x27;jquery&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 app2 中也使用 <code>jquery</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 加入下面代码</span></span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;jquery&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到 <code>jquery</code> 加载了两次，分别在本地 :8801 和远程 <code>sitename</code> 模块中使用的 :8800 也加载了一次。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-203732.png"></p><p>在 app1 和 app 中的都加入如下 <code>shared</code> 配置，然后关闭 server 重新启动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Mfp</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">shared</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: &#123;</span><br><span class="line">      <span class="attr">requiredVersion</span>: <span class="string">&#x27;^3.6.1&#x27;</span>,</span><br><span class="line">      <span class="attr">singleton</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-203920.png"></p><p>可以看到此时 <code>jquery</code> 只加载一次且加载的是本地的 <code>jquery</code>（:8801）而不是远程模块的。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><h5 id="提供方（remote）打包后的文件"><a href="#提供方（remote）打包后的文件" class="headerlink" title="提供方（remote）打包后的文件"></a>提供方（remote）打包后的文件</h5><p>接下来我们来看提供方（remote），也就是 app1 打包后的文件列表：</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-174713.png"></p><ul><li><code>app.js</code> 是远程入口文件，其他 webpack 构建使用、访问本项目暴露的模块时，须通过它来加载。</li><li><code>main.js</code> 是本项目的入口文件。</li><li><code>src_info_js.js</code> 和 <code>src_sitename_js.js</code> 是暴露的模块，供其他项目消费。</li></ul><h5 id="提供方（remote）远程入口文件"><a href="#提供方（remote）远程入口文件" class="headerlink" title="提供方（remote）远程入口文件"></a>提供方（remote）远程入口文件</h5><p>提供方（remote）的统一访问入口文件 <code>app1.js</code> 负责维护管理加载共享模块。</p><p>当我们在消费方（host）执行 <code>import(&#39;appone/sitename&#39;)</code> 时，app2 会载入这个文件然后引入 <code>sitename</code> 组件。 <code>container.get(./sitenname)</code> 会从 <code>__webpack_modules__</code> 里面拿到加载组件的方法，执行 <code>webpack_require.e</code>，并返回 promise。<br>具体源码如下：</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-194409.png"></p><p><code>moduleMap</code> 是具体业务组件以及对应组件的加载策略。<br><code>get</code> 外部应用调用 get 方法加载具体业务组件。<br><code>init</code> 处理全局依赖共享的问题，处理共享模块的全局依赖，比如 <code>jquery</code> 模块。</p><h5 id="消费者（host）如何加载远程入口文件"><a href="#消费者（host）如何加载远程入口文件" class="headerlink" title="消费者（host）如何加载远程入口文件"></a>消费者（host）如何加载远程入口文件</h5><p>app2 如何载入 app1 的 app1.js<br><code>import(&#39;appone/sitename&#39;)</code> 在 app2 打包后会编译成如下代码：</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-195445.png"></p><p><code>webpack_require.e</code> 作为加载远程 chunk 的方法，可与 <code>webpack_require</code> 加载本地脚本进行对比。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-195651.png"></p><p>这里遍历执行 <code>webpack_require.f</code> 里面的方法并收集返回的 <code>promise</code>，当所有的 <code>promise</code> 都完成时意味着这个远程的模块已经加载到内存里面了，注册进 <code>webpack_modules</code> 这个全局模块缓冲池里面了。</p><p><img src="/2022/09/15/webpack5%E6%96%B0%E7%89%B9%E6%80%A7/20220925-200036.png"></p><h4 id="与其他共享代码方案比较"><a href="#与其他共享代码方案比较" class="headerlink" title="与其他共享代码方案比较"></a>与其他共享代码方案比较</h4><p>module两种，本地构建的模块(local module)、运行时容器加载的远程模块(remote module)。<br> 模块联邦并没有样式隔离机制, 这意味着, 当主子应用很有可能会互相造成样式污染.<br>但缺点公用全局变量和全局style，以及将模块暴露在全局变量下不够优雅。<br>让代码直接在项目间利用 CDN 直接共享<br>比如我们在开发两个应用A和B，A应用需要引用B应用，假设这两个应用是两个人开发的，都处于开发阶段，那么这时候就可以通过webpack的模块联邦Module Federation，将B应用暴露出去，然后A应用引用B应用。这样就不需要每次B应用build完了给A，直接可以同步开发。</p><p>使用模块联邦，每个应用块都应该是一个独立的构建，这些构建都将编译成容器，容器可以被其他应用或容器使用，引用模块的引用者成为host，一个被引用的容器成为remote。</p><p>有点类似微前端，其实微前端方案中确实也有模块联邦的方案。</p><p><strong>NPM</strong><br>你有一个组件包通过npm发布后，你的10个业务项目引用这个组件包。当这个组件包更新了版本，你的10个项目想要使用最新功能就必须一一升级版本、编译打包、部署，这很繁琐。但是模块联邦让组件包利用CDN的方式共享给其他项目，这样一来，当你到组件包更新了，你的10个项目中的组件也自然更新了。是不是很香(<em>^▽^</em>)<br>维护一个 CommonComponents 的 NPM 包，在不同项目中安装、使用。如果 NPM 包升级，对应项目都需要安装新版本，本地编译，打包到 bundle 中。<br><strong>UMD</strong><br>即Universal Module Definition（通用模块规范），基本原理是利用设计模式中的工厂函数来统一不同的模块定义规范。<br>类似于我们开发的时候，经常会把某些功能封装成可复用的模块。并且对外暴露一个API，比如jquery、lodash等这类第三方插件，也可以通过CND的方式直接应用。后续这个公共函数的升级改造，我们更新CND引用链接地址，应用就自然也更新了。<br>UMD 优点在 runtime。缺点也明显，体积优化不方便，容易有版本冲突。</p><p><strong>微前端</strong><br>独立应用间的共享也是问题。一般有两种打包方式：</p><p>子应用独立打包，模块解耦了，但公共的依赖不易维护处理</p><p>整体应用一起打包，能解决公共依赖；但庞大的多个项目又使打包变慢，后续也不好扩展<br>插拔式的热更新</p><p>从图中可以看到，这个方案是直接将一个应用的 bundle，应用于另一个应用。<br>应用可以模块化输出，就是说它本身可以自我消费，也可以动态分发 runtime 子模块给其他应用</p><p>。<br>试想一下，你有一个组件包通过npm发布后，你的10个业务项目引用这个组件包。当这个组件包更新了版本，你的10个项目想要使用最新功能就必须一一升级版本、编译打包、部署，这很繁琐。但是模块联邦让组件包利用CDN的方式共享给其他项目，这样一来，当你到组件包更新了，你的10个项目中的组件也自然更新了。是不是很香(<em>^▽^</em>)</p><p>大部分子应用都依赖的资源怎么处理<br>模块联邦可以去依赖一个远程模块，这个依赖会在运行时生效，并不影响编译时。因此，这个远程依赖的模块就可以是一个微前端独立模块。同时，每个独立模块都可以申明公共的依赖库，这样也可以避免独立模块间的依赖包的冗余和冲突。<br>在shared中可以定义依赖的公共库，这个例子就是rxjs。这样就可以保证整个应用仅仅会加载rxjs库一次，否则的话公共库会被打包进入宿主应用，同时也会在各个子模块中重复出现。</p><p>当然，shared的公共库需要保证是一样的版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-启动命令&quot;&gt;&lt;a href=&quot;#1-启动命令&quot; class=&quot;headerlink&quot; title=&quot;1 启动命令&quot;&gt;&lt;/a&gt;1 启动命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;webpack4 启动 devServer，用的命令是 &lt;code&gt;webpack-dev-se</summary>
      
    
    
    
    <category term="Webpack" scheme="https://nevvvver.github.io/categories/Webpack/"/>
    
    
    <category term="webpack5" scheme="https://nevvvver.github.io/tags/webpack5/"/>
    
  </entry>
  
  <entry>
    <title>《深入浅出Node.js》笔记</title>
    <link href="https://nevvvver.github.io/2022/07/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodeJS/"/>
    <id>https://nevvvver.github.io/2022/07/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodeJS/</id>
    <published>2022-07-13T09:35:49.000Z</published>
    <updated>2022-10-11T02:58:57.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第1章-Node简介"><a href="#第1章-Node简介" class="headerlink" title="第1章 Node简介"></a>第1章 Node简介</h3><p>电子书：<a href="https://awesome-programming-books.github.io/nodejs/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode.js.pdf">《深入浅出Node.js》</a></p><h4 id="1-1-Node的诞生历程"><a href="#1-1-Node的诞生历程" class="headerlink" title="1.1 Node的诞生历程"></a>1.1 Node的诞生历程</h4><h4 id="1-2-Node的命名与起源"><a href="#1-2-Node的命名与起源" class="headerlink" title="1.2 Node的命名与起源"></a>1.2 Node的命名与起源</h4><ul><li>设计高性能Web服务器的几个要点：事件驱动、非阻塞I&#x2F;O。</li></ul><h4 id="1-3-Node给JavaScript带来的意义"><a href="#1-3-Node给JavaScript带来的意义" class="headerlink" title="1.3 Node给JavaScript带来的意义"></a>1.3 Node给JavaScript带来的意义</h4><ul><li>Node打破了过去JavaScript只能在浏览器中运行的局面。</li><li>在Node中，JavaScript可以随心所欲地访问本地文件，可以搭建WebSocket服务端，可以连接数据库，可以如Web Workers一样玩转多进程。</li></ul><p><img src="/2022/07/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodeJS/1-1.png"></p><h4 id="1-4-Node的特点"><a href="#1-4-Node的特点" class="headerlink" title="1.4 Node的特点"></a>1.4 Node的特点</h4><h5 id="1-4-1-异步I-x2F-O"><a href="#1-4-1-异步I-x2F-O" class="headerlink" title="1.4.1 异步I&#x2F;O"></a>1.4.1 异步I&#x2F;O</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起一个Ajax请求</span></span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;/url&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;深入浅出Node.js&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到响应&#x27;</span>); <span class="comment">//将在异步请求结束后执行，但不知道具体的时间点</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送Ajax结束&#x27;</span>); </span><br></pre></td></tr></table></figure><ul><li>“收到响应”是在“发送Ajax结束”之后输出的。</li></ul><p><img src="/2022/07/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodeJS/1-2.png?450x" alt="经典的Ajax调用"></p><ul><li>这里的“发起读取文件”是在“读取文件完成”之前输出的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/path&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,file</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发起读取文件&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>在Node中，绝大多数的操作都以异步的方式进行调用。</strong>每个调用之间无需等待之前的I&#x2F;O调用结束，在编程模型上可以极大提升效率。</li><li>对于异步而言，两个读取任务的耗时取决于最慢的那个文件读取的耗时。对于同步I&#x2F;O而言，它们的耗时是两个任务的耗时之和。</li></ul><h5 id="1-4-2-事件与回调函数"><a href="#1-4-2-事件与回调函数" class="headerlink" title="1.4.2 事件与回调函数"></a>1.4.2 事件与回调函数</h5><ul><li>Node创建一个Web服务器，并监听8080端口。</li><li>对于服务器，我们为其绑定了request事件，对于请求对象，我们为其绑定了data事件和end事件。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  req.<span class="title function_">setEncoding</span>(<span class="string">&#x27;uft8&#x27;</span>);</span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">trunk</span>)&#123;</span><br><span class="line">    postData += trunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(postData);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动完成&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>相应地，我们在前端为Ajax请求定了success事件，在发出请求后，只需关心请求成功时执行相应的业务逻辑就即可。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"> <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/url&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data&#x27;</span>: &#123;&#125;,</span><br><span class="line"> <span class="string">&#x27;success&#x27;</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"> <span class="comment">// success事件</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>Node除了异步和事件外，回调函数是一大特色。回调函数也是最好的接受异步调用返回数据的方式。</li><li>代码的编写顺序与执行顺序并无关系。</li></ul><h5 id="1-4-3-单线程"><a href="#1-4-3-单线程" class="headerlink" title="1.4.3 单线程"></a>1.4.3 单线程</h5><ul><li>Node保持了JavaScript在浏览器中单线程的特点。而且在Node中，JavaScript与其余线程是无法共享任何状态的。</li><li>单线程的最大好处是不用像多线程编程那样在意状态的同步问题，这里没有死锁的存在，也没有线程上下文交换带来的性能上的开销。</li><li>单线程的弱点：<ul><li>无法利用多核CPU；</li><li>错误会引起整个应用退出，应用的健壮性值得考验；</li><li>大量计算占用CPU导致无法继续调用异步I&#x2F;O。</li></ul></li><li>Node采用了与Web Workers相同的思路来解决单线程中计算量的问题：<strong>子线程（child_process）</strong>。</li></ul><h5 id="1-4-4-跨平台"><a href="#1-4-4-跨平台" class="headerlink" title="1.4.4 跨平台"></a>1.4.4 跨平台</h5><ul><li>起初Node只可以在Linux平台上运行，现在Node可以借助libuv实现跨平台<br><img src="/2022/07/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodeJS/1-3.png?350x"></li></ul><h4 id="1-5-Node的应用场景"><a href="#1-5-Node的应用场景" class="headerlink" title="1.5 Node的应用场景"></a>1.5 Node的应用场景</h4><h5 id="1-5-1-I-x2F-O密集型"><a href="#1-5-1-I-x2F-O密集型" class="headerlink" title="1.5.1 I&#x2F;O密集型"></a>1.5.1 I&#x2F;O密集型</h5><ul><li>从单线程的角度来说，Node面向网络且<strong>擅长并行I&#x2F;O</strong>，能有效地组织起更多的硬件资源，从而提供更好的服务。</li><li>I&#x2F;O密集的优势主要在于Node利用<strong>事件循环</strong>的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。</li></ul><h5 id="1-5-2-是否不擅长CPU密集型业务"><a href="#1-5-2-是否不擅长CPU密集型业务" class="headerlink" title="1.5.2 是否不擅长CPU密集型业务"></a>1.5.2 是否不擅长CPU密集型业务</h5><ul><li>Node在性能上并不差，甚至表现得很优秀。</li><li>CPU密集的挑战主要是由于JavaScript单线程的原因，若有长时间运行的计算（大循环）将会导致CPU时间片不能释放，使得后续I&#x2F;O无法发起。但适当调整和分解大型运算任务为多个小任务，能使运算适时释放，不阻塞I&#x2F;O调用。</li><li>Node可以通过编写C&#x2F;C++扩展的方式更高效低利用CPU；利用子进程，将计算和I&#x2F;O分离。</li></ul><h5 id="1-5-3-与遗留系统和平共处"><a href="#1-5-3-与遗留系统和平共处" class="headerlink" title="1.5.3 与遗留系统和平共处"></a>1.5.3 与遗留系统和平共处</h5><h5 id="1-5-4-分布式应用"><a href="#1-5-4-分布式应用" class="headerlink" title="1.5.4 分布式应用"></a>1.5.4 分布式应用</h5><ul><li>阿里巴巴ࣄ开发了中间应用NodeFox、ITier，数据库及做了Ѳ分֖௡࠰,ಉលុ用Ιே是᧪对ӬषᛪᤈᛠSQLಉ<br>ល，中ᫍࡎ分解ಉលSQL，并ᛠڠԜ多Ի数૵ं中ᖌԨ数૵并Ջ并。NodeFox能实ဗ对多ԻMySQL<br>数૵ं的ಉល，ݟՎಉល一ԻMySQL一样，ᏪITierఝ强大，ಉល多个数૵ंݟՎ</li></ul><h4 id="1-6-Node的使用者"><a href="#1-6-Node的使用者" class="headerlink" title="1.6 Node的使用者"></a>1.6 Node的使用者</h4><hr><h3 id="第2章-模块机制"><a href="#第2章-模块机制" class="headerlink" title="第2章 模块机制"></a>第2章 模块机制</h3><h4 id="2-1-CommonJS规范"><a href="#2-1-CommonJS规范" class="headerlink" title="2.1 CommonJS规范"></a>2.1 CommonJS规范</h4><h5 id="2-1-1-CommonJS的出发点"><a href="#2-1-1-CommonJS的出发点" class="headerlink" title="2.1.1 CommonJS的出发点"></a>2.1.1 CommonJS的出发点</h5><ul><li>在JavaScript的发展历程中，它主要在浏览器前端发光发热。官方规范（ECMAScript）规范化的时间较早，在实际应用中，JavaScript的表现能力取决于宿主环境中（浏览器）API支持程度。</li><li>后端JavaScript的规范远远落后，它的规范依然是薄弱的。<ul><li>没有模块系统。</li><li>标准库较少。ES仅定义了部分核心库，对于文件系统I&#x2F;O流等常见需求却没有标准的API。</li><li>没有标准接口。</li><li>缺乏包管理系统。</li></ul></li></ul><h5 id="2-1-2-CommonJS的模块规范"><a href="#2-1-2-CommonJS的模块规范" class="headerlink" title="2.1.2 CommonJS的模块规范"></a>2.1.2 CommonJS的模块规范</h5><p><strong>1 模块引用</strong></p><ul><li>上下文提供<code>require()</code>方法来引入外部模块。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&#x27;math&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>2 模块定义</strong></p><ul><li>上下文提供<code>export</code>对象用于导出当前模块的方法或者变量，并且它事唯一导出的出口。</li><li>在模块中，还存在一个<code>module</code>对象，它代表模块自身，而<code>export</code>是<code>module</code>的属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//math.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">      i = <span class="number">0</span>,</span><br><span class="line">      args = <span class="variable language_">arguments</span>,</span><br><span class="line">      l = args.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; l)&#123;</span><br><span class="line">      sum += args[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// program.js</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&#x27;math&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>3 模块标识</strong></p><ul><li>模块标识其实就是传递给<code>require()</code>方法的参数，他必须是符合<strong>小驼峰命名</strong>的字符串，或者以.、..开ܿ的相对路径，或者绝对路径。每个模块具有独立的空间，互不干扰。</li></ul><p><img src="/2022/07/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodeJS/2-1.png?x444"></p><h4 id="2-2-Node的模块实现"><a href="#2-2-Node的模块实现" class="headerlink" title="2.2 Node的模块实现"></a>2.2 Node的模块实现</h4><ul><li>Node的模块机制只需要<code>exports</code>、<code>require</code>、<code>module</code>，但在Node中引入模块需要经历3个步骤：<ul><li>（1）路径分析</li><li>（2）文件定位</li><li>（3）编译执行</li></ul></li><li>Node的两类模块：<ul><li><strong>核心模块（Node提供的模块）</strong>： 在Node源代码的编译过程中，编译进了二进制执行文件。在node进程启动时，部分核心模块就直接加载进内存中，所以这部分核心模块引入时，无需文件定位和编译执行，并且在路径分析中优先判断，所以它的加载速度是最快的。</li><li><strong>文件模块（用户编写的模块）</strong>：在运行时动态加载，需要完整的三个步骤，速度比核心模块慢。</li></ul></li></ul><h5 id="2-2-1-优先从缓存加载"><a href="#2-2-1-优先从缓存加载" class="headerlink" title="2.2.1 优先从缓存加载"></a>2.2.1 优先从缓存加载</h5><ul><li>Node对引入过的模块都会进行缓存，减少二次引入时的开销。</li><li>不同的地方在于，浏览器仅仅缓存文件，而Node缓存的是编译之后的对象。</li><li>核心模块的缓存检查优先于文件模块的缓存检查。</li></ul><h5 id="2-2-2-路径分析和文件定位"><a href="#2-2-2-路径分析和文件定位" class="headerlink" title="2.2.2 路径分析和文件定位"></a>2.2.2 路径分析和文件定位</h5><p><strong>1 路径分析（模块标识符分析）</strong></p><ul><li><p>对于不同的标识符，模块的查找和定位有不同程度上的差异。</p></li><li><p>模块标识符分为4类：</p><ul><li>核心模块，如<code>http</code>、<code>fs</code>、<code>path</code>等。</li><li><code>.</code>或<code>..</code>开始的相对路径文件模块。</li><li><code>/</code>开始的绝对路径文件模块。</li><li>非路径形式的文件模块，如自定义的<code>connect</code>模块。</li></ul></li><li><p><strong>核心模块：</strong>核心模块的优先级仅次于缓存加载，已在Node源码编译过程编译成二进制代码，其加载过程最快。如果试图加载一个与核心模块标识符相同的自定模块，必须选择一个不同的标识符或换用路径的方式。</p></li><li><p><strong>路径形式的文件模块：</strong>以<code>.</code>、<code>..</code>、<code>/</code>开始的标识符，都被当作文件模块来处理。在分析路径模块时，<code>require()</code>会将路径转为真实路径，并以真实路径作为索引，将编译执行后的结果放到缓存中，以便二次加载。也可以节约大量时间，因为给Node指明了确切的文件位置。</p></li><li><p><strong>自定义模块：</strong>这类模块查找是最费时的。</p><blockquote><p><strong>模块路径：</strong>是Node在定位文件模块的具体文件时制定的查找策略，是一个路径组成的数组。可以看出，模块路径的生成规则是，原路径向上逐级递归，直到根目录下的node_modules目录。若当前文件路径越深，模块查找耗时会越多。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module_path.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">paths</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是在MacOS下vscode的输出</span></span><br><span class="line">[</span><br><span class="line">  <span class="string">&#x27;/Users/Never/Desktop/project/nodeStudy/path/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/Users/Never/Desktop/project/nodeStudy/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/Users/Never/Desktop/project/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/Users/Never/Desktop/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/Users/Never/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/Users/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/node_modules&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前目录: /usr/local/test/index.js</span></span><br><span class="line"><span class="comment">// gulp模块所在路径为 /usr/lib/node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">paths</span>);    <span class="comment">// [&#x27;/usr/local/test/node_modules&#x27;, &#x27;/usr/local/node_modules&#x27;, &#x27;/usr/node_modules&#x27;, &#x27;/node_modules&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);   <span class="comment">// 报错“MODULE_NOT_FOUND”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试修改该数组 影响本模块加载依赖的顺序</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">paths</span>.<span class="title function_">push</span>(<span class="string">&#x27;/usr/lib/node_modules&#x27;</span>);   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">paths</span>);    <span class="comment">//[&#x27;/usr/local/test/node_modules&#x27;, &#x27;/usr/local/node_modules&#x27;, &#x27;/usr/node_modules&#x27;, &#x27;/node_modules&#x27;, &#x27;/usr/lib/node_modules&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);   <span class="comment">// 运行成功，但Node会在找到gulp依赖前遍历4层目录，最后才在第五层目录中找到它</span></span><br></pre></td></tr></table></figure><p><strong>2 文件定位</strong></p><ul><li>文件定位主要包括文件扩展名分析、目录和包的处理</li></ul><p><strong>文件扩展名分析</strong></p><ul><li><code>require()</code>在分析不包含文件扩展名的标识符时，Node会按<code>.js</code>、<code>.json</code>、<code>.node</code>的次序补足扩展名，依次尝试。</li><li>Node需要调用fs模块同步阻塞式地判断文件是否存在。因此若<code>.json</code>、<code>.node</code>文件，给标识符带上扩展名会更快。</li></ul><p><strong>目录分析和包</strong></p><ul><li>分析文件扩展名之后，可能没有找到对应文件，但却找到一个目录，Node则会将目录当作一个包来处理。</li><li>Node在当前目录下查找<code>package.json</code>，通过<code>JSON.parse()</code>解析出包描述的对象，从中找到<code>main</code>属性置顶的文件名进行定位，若缺少扩展名则会进行扩展名分析的不走。若<code>main</code>指定的文件错误或根本没有<code>package.json</code>，Node则会将<code>index</code>当作默认文件名，一次查找<code>index.js</code>、<code>index.jsn</code>、<code>index.node</code>。</li><li>若在目录分析中没有定位成功任何文件，则进入下一个模块路径进行查找，知道路径数组都被遍历完毕，还是没找到目标文件，就会抛出查找失败的异常。</li></ul><h5 id="2-2-3-模块编译"><a href="#2-2-3-模块编译" class="headerlink" title="2.2.3 模块编译"></a>2.2.3 模块编译</h5><ul><li>每个文件模块都是一个对象，定义如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">  <span class="keyword">if</span>(parent &amp;&amp; parent.<span class="property">children</span>) &#123;</span><br><span class="line">    parent.<span class="property">children</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译和执行是引入模块的最后一个阶段。</li></ul><h3 id="第3章-异步I-x2F-O"><a href="#第3章-异步I-x2F-O" class="headerlink" title="第3章 异步I&#x2F;O"></a>第3章 异步I&#x2F;O</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><h4 id="3-3-Node的异步I-x2F-O"><a href="#3-3-Node的异步I-x2F-O" class="headerlink" title="3.3 Node的异步I&#x2F;O"></a>3.3 Node的异步I&#x2F;O</h4><h5 id="3-3-1-事件循环"><a href="#3-3-1-事件循环" class="headerlink" title="3.3.1 事件循环"></a>3.3.1 事件循环</h5><ul><li>Node自身的执行模型——事件循环。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第1章-Node简介&quot;&gt;&lt;a href=&quot;#第1章-Node简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 Node简介&quot;&gt;&lt;/a&gt;第1章 Node简介&lt;/h3&gt;&lt;p&gt;电子书：&lt;a href=&quot;https://awesome-programmi</summary>
      
    
    
    
    <category term="Books" scheme="https://nevvvver.github.io/categories/Books/"/>
    
    
    <category term="node" scheme="https://nevvvver.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript权威指南(第6版)》笔记</title>
    <link href="https://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <id>https://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-11T09:27:54.000Z</published>
    <updated>2022-07-18T09:48:41.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第〇部分"><a href="#第〇部分" class="headerlink" title="第〇部分"></a>第〇部分</h3><h4 id="第1章-JavaScript概述"><a href="#第1章-JavaScript概述" class="headerlink" title="第1章 JavaScript概述"></a>第1章 JavaScript概述</h4><p>电子书：<a href="https://awesome-programming-books.github.io/javascript/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97(%E7%AC%AC6%E7%89%88).pdf">《JavaScript权威指南(第6版)》</a></p><h3 id="第一部分-JavaScript-语言核心"><a href="#第一部分-JavaScript-语言核心" class="headerlink" title="第一部分 JavaScript 语言核心"></a>第一部分 JavaScript 语言核心</h3><h4 id="第2章-词法结构"><a href="#第2章-词法结构" class="headerlink" title="第2章 词法结构"></a>第2章 词法结构</h4><h5 id="2-1-字符集"><a href="#2-1-字符集" class="headerlink" title="2.1 字符集"></a>2.1 字符集</h5><h4 id="第6章-对象"><a href="#第6章-对象" class="headerlink" title="第6章 对象"></a>第6章 对象</h4><ul><li><strong>内置对象（native object）</strong>是由ECMAScript规范定义的对象或类。例如数组、函数、日期、正则表达式等。</li><li><strong>宿主对象（host object）</strong>是由JavaScript解释器所嵌入的宿主环境（比如Web浏览器）定义的。</li><li><strong>自定义对象 （user-defiend object）</strong>是由运行中的JavaScript代码创建的对象。</li><li><strong>自有属性（own property）</strong>是直接在对象中定义的属性。</li><li><strong>继承属性（inherited property）</strong>是在对象的原型对象中定义的属性。</li></ul><h5 id="6-1-创建对象"><a href="#6-1-创建对象" class="headerlink" title="6.1 创建对象"></a>6.1 创建对象</h5><p><strong>对象直接量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> point = &#123; <span class="attr">x</span>:<span class="number">0</span>, <span class="attr">y</span>:<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">&quot;main title&quot;</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sub-title&quot;</span>: <span class="string">&quot;The Definitive Guide&quot;</span>,</span><br><span class="line">  <span class="string">&quot;for&quot;</span>: <span class="string">&quot;all audiences&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">firstname</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">    <span class="attr">surname</span>: <span class="string">&quot;Flanagan&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象直接量是一个表达式，表达式的每次运算都<strong>创建并初始化一个新的对象</strong>。</li></ul><hr><p><strong>关键字new</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();     <span class="comment">// 创建一个空对象，和&#123;&#125;一样</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();      <span class="comment">// 创建一个空数组，和[]一样</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();       <span class="comment">// 创建一个白哦是当前时间的Date对象</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;js&quot;</span>); <span class="comment">// 创建一个可以进行模式匹配的RegExp对象</span></span><br></pre></td></tr></table></figure><ul><li>new运算符后面跟的是一个<strong>函数调用</strong>，这个函数被称为<strong>构造函数（constructor）</strong>。js中原始类型都包含内置的构造函数，也可以自己定义构造函数。</li></ul><hr><p><strong>原型</strong></p><ul><li>每一个JavaScript对象（null除外）对合另一个对象（原型）相关联，每一个对象都从原型继承属性。</li><li>通过new Object()创建的对象也继承自<code>Object.prototype</code>，new Array()</li></ul><p><strong>Object.create()（ES5）</strong></p><h4 id="第9章-类和模块"><a href="#第9章-类和模块" class="headerlink" title="第9章 类和模块"></a>第9章 类和模块</h4><h5 id="9-1-类和原型"><a href="#9-1-类和原型" class="headerlink" title="9.1 类和原型"></a>9.1 类和原型</h5><ul><li>类的所有实例对象都从同一个原型对象上继承属性。</li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range.js: 实现一个能表示值的范围的类</span></span><br><span class="line"><span class="comment">// 这个工厂方法返回一个新的“范围对象”</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">range</span>(<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-2-类和构造函数"><a href="#9-2-类和构造函数" class="headerlink" title="9.2 类和构造函数"></a>9.2 类和构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;   <span class="comment">// 这是一个函数对象</span></span><br><span class="line"><span class="keyword">var</span> p = F.<span class="property"><span class="keyword">prototype</span></span>;    <span class="comment">// 这是F相关联的原型对象</span></span><br><span class="line"><span class="keyword">var</span> c = p.<span class="property">constructor</span>;  <span class="comment">// 这是与原型相关联的函数</span></span><br><span class="line">c === F                 <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">F</span>();        <span class="comment">// 创建类F的一个实例</span></span><br><span class="line">o.<span class="property">constructor</span> === F     <span class="comment">// =&gt; true construtor属性指代这个类</span></span><br></pre></td></tr></table></figure><ul><li>对于任意函数 <code>F.prototype.constructor === F</code></li></ul><p><img src="/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/9-1.png"></p><h5 id="9-3-JavaScript中Java式的类继承"><a href="#9-3-JavaScript中Java式的类继承" class="headerlink" title="9.3 JavaScript中Java式的类继承"></a>9.3 JavaScript中Java式的类继承</h5><ul><li>类字段、类方法；实例字段、实例方法</li><li>构造函数对象<br>原型对象</li></ul><h5 id="9-5-类和类型"><a href="#9-5-类和类型" class="headerlink" title="9.5 类和类型"></a>9.5 类和类型</h5><ul><li>三种可以检测对象的类的方法：instanceof运算符、constructor属性、构造函数的名字。</li><li>三种方法都不完美，但利用鸭式辩型，可以更加关注对象可以完成什么工做而不是对象属于哪个类。</li></ul><h6 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h6><ul><li><code>o instanceof c</code> 返回true，表示o继承自c.prototype，这里的继承可以不是直接继承</li><li>构造函数是类的公共标识，但原型是唯一的标识。instanceof检测了对象的继承关系，而不是检测创建对象的构造函数</li></ul><h6 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h6><p>- </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第〇部分&quot;&gt;&lt;a href=&quot;#第〇部分&quot; class=&quot;headerlink&quot; title=&quot;第〇部分&quot;&gt;&lt;/a&gt;第〇部分&lt;/h3&gt;&lt;h4 id=&quot;第1章-JavaScript概述&quot;&gt;&lt;a href=&quot;#第1章-JavaScript概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Books" scheme="https://nevvvver.github.io/categories/Books/"/>
    
    
    <category term="javascript" scheme="https://nevvvver.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jsoneditor-react的类型声明文件</title>
    <link href="https://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
    <id>https://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</id>
    <published>2022-06-07T09:25:44.000Z</published>
    <updated>2022-06-07T09:46:02.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jsoneditor-react-d-ts"><a href="#jsoneditor-react-d-ts" class="headerlink" title="jsoneditor-react.d.ts"></a>jsoneditor-react.d.ts</h3><p>放在src下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;jsoneditor-react&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JsonEditor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">JsonEditorProps</span>&gt; &#123;</span><br><span class="line">    public <span class="attr">jsonEditor</span>: unknown;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    type <span class="title class_">Mode</span> = <span class="string">&#x27;tree&#x27;</span> | <span class="string">&#x27;view&#x27;</span> | <span class="string">&#x27;form&#x27;</span> | <span class="string">&#x27;code&#x27;</span> | <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    interface <span class="title class_">JsonEditorProps</span> &#123;</span><br><span class="line">      <span class="attr">value</span>: unknown;</span><br><span class="line">      <span class="comment">/** Set the editor mode. Default &#x27;tree&#x27; */</span></span><br><span class="line">      mode?: <span class="title class_">Mode</span>;</span><br><span class="line">      <span class="comment">/** Initial field name for root node */</span></span><br><span class="line">      name?: string;</span><br><span class="line">      <span class="comment">/** Validate the JSON object against a JSON schema. */</span></span><br><span class="line">      <span class="attr">schema</span>: unknown;</span><br><span class="line">      <span class="comment">/** Schemas that are referenced using the $ref property */</span></span><br><span class="line">      schemaRefs?: object;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * If true, object keys in &#x27;tree&#x27;, &#x27;view&#x27; or &#x27;form&#x27; mode list be listed alphabetically</span></span><br><span class="line"><span class="comment">       * instead by their insertion order.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      sortObjectKeys?: boolean;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Set a callback function triggered when json in the JSONEditor change */</span></span><br><span class="line">      onChange?: <span class="function">(<span class="params">value: object[]</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Set a callback function triggered when an error occurs.</span></span><br><span class="line"><span class="comment">       * Invoked with the error as first argument.</span></span><br><span class="line"><span class="comment">       * The callback is only invoked for errors triggered by a users action,</span></span><br><span class="line"><span class="comment">       * like switching from code mode to tree mode or clicking</span></span><br><span class="line"><span class="comment">       * the Format button whilst the editor doesn&#x27;t contain valid JSON.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      onError?: <span class="function">(<span class="params">error: unknown</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      <span class="comment">/** Set a callback function triggered right after the mode is changed by the user. */</span></span><br><span class="line">      onModeChange?: <span class="function">(<span class="params">mode: Mode</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      onClassName?: <span class="function">(<span class="params">args: &#123; path: unknown; field: unknown; value: unknown &#125;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Provide a version of the Ace editor. Only applicable when mode is code */</span></span><br><span class="line">      ace?: object;</span><br><span class="line">      <span class="comment">/** Provide a instance of ajv,the library used for JSON schema validation. */</span></span><br><span class="line">      ajv?: object;</span><br><span class="line">      <span class="comment">/** Set the Ace editor theme, uses included &#x27;ace/theme/jsoneditor&#x27; by default. */</span></span><br><span class="line">      theme?: string;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Enables history, adds a button Undo and Redo to the menu of the JSONEditor.</span></span><br><span class="line"><span class="comment">       * Only applicable when mode is &#x27;tree&#x27; or &#x27;form&#x27;. Default to false</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      history?: boolean;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Adds navigation bar to the menu</span></span><br><span class="line"><span class="comment">       * the navigation bar visualize the current position on the</span></span><br><span class="line"><span class="comment">       * tree structure as well as allows breadcrumbs navigation. Default to true</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      navigationBar?: boolean;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Adds status bar to the buttom of the editor</span></span><br><span class="line"><span class="comment">       * the status bar shows the cursor position and a count of the selected characters.</span></span><br><span class="line"><span class="comment">       * Only applicable when mode is &#x27;code&#x27; or &#x27;text&#x27;. Default to true</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      statusBar?: boolean;</span><br><span class="line">      <span class="comment">/** Enables a search box in the upper right corner of the JSONEditor. Default to true */</span></span><br><span class="line">      search?: boolean;</span><br><span class="line">      <span class="comment">/** Create a box in the editor menu where the user can switch between the specified modes. */</span></span><br><span class="line">      allowedModes?: <span class="title class_">Mode</span>[];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Html element, or react element to render */</span></span><br><span class="line">      tag?: string | <span class="title class_">HTMLElement</span>;</span><br><span class="line">      <span class="comment">/** html element custom props */</span></span><br><span class="line">      htmlElementProps?: object;</span><br><span class="line">      <span class="comment">/** callback to get html element reference */</span></span><br><span class="line">      innerRef?: <span class="function">(<span class="params">ref: unknown</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;jsoneditor-react-d-ts&quot;&gt;&lt;a href=&quot;#jsoneditor-react-d-ts&quot; class=&quot;headerlink&quot; title=&quot;jsoneditor-react.d.ts&quot;&gt;&lt;/a&gt;jsoneditor-react.d.ts&lt;/</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://nevvvver.github.io/categories/TypeScript/"/>
    
    
    <category term="javascript" scheme="https://nevvvver.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="https://nevvvver.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>可枚举性(enumerable)</title>
    <link href="https://nevvvver.github.io/2022/03/15/enumerable/"/>
    <id>https://nevvvver.github.io/2022/03/15/enumerable/</id>
    <published>2022-03-14T18:53:58.000Z</published>
    <updated>2022-03-15T16:09:02.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li><p>在 JavaScript 中，对象的属性可以分为<strong>实例属性</strong>和<strong>原型 (prototype) 属性</strong>。</p><ul><li>实例属性：指的是自身属性。</li><li>原型属性：指的是从原型链上继承的属性。</li><li><code>Object.prototype.hasOwnProperty()</code> 可以判断某一个属性是否是对象的自身属性。</li></ul></li><li><p>对象的每一个属性都有一个<strong>描述对象 (Descriptor)</strong> ,描述对象的 <strong>enumerable</strong> 属性称为“可枚举性”。</p></li><li><p>引入“可枚举性”这个概念的最初目的，就是让某些属性可以规避掉 <code>for...in</code> 操作。</p></li></ul><h3 id="可枚举性的作用"><a href="#可枚举性的作用" class="headerlink" title="可枚举性的作用"></a>可枚举性的作用</h3><p>与可枚举性有关的操作：</p><table><thead><tr><th>函数方法</th><th>描述</th><th align="center">实例属性</th><th align="center">原型属性</th></tr></thead><tbody><tr><td><code>for...in</code></td><td>遍历对象自身和原型上的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center">〇</td></tr><tr><td><code>Object.keys()</code></td><td>返回对象自身的所有<strong>可枚举</strong>属性的键名</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>JSON.stringify</code></td><td>只串行化对象自身的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>Object.assign()</code>(ES6)</td><td>只拷贝对象自身的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>Object.getOwnPropertyNames()</code></td><td>返回对象自身的<strong>所有属性</strong>的键名</td><td align="center">〇</td><td align="center"></td></tr></tbody></table><h4 id="code-samples"><a href="#code-samples" class="headerlink" title="code samples"></a>code samples</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Never&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过直接的赋值和属性初始化的属性，可枚举性默认为true</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">School</span> = <span class="string">&#x27;Tust&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Object.defineProperty() 等定义的属性，可枚举性默认为false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;sex&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="comment">// enumerable: false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// name</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> person)&#123;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// name, School</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(person).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)<span class="comment">// name, sex</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何判断属性是否可枚举"><a href="#如何判断属性是否可枚举" class="headerlink" title="如何判断属性是否可枚举"></a>如何判断属性是否可枚举</h3><ul><li><code>Object.propertyIsEnumerable()</code> 方法可以判断一个属性是否是对象的<strong>可枚举的自身属性</strong>。（注：如果判断的属性是原型属性，不管它是否可枚举都会返回false）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;School&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;sex&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 JavaScript 中，对象的属性可以分为&lt;strong&gt;实例属性&lt;/strong&gt;和&lt;strong&gt;原型 (pro</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nevvvver.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://nevvvver.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="https://nevvvver.github.io/tags/es6/"/>
    
  </entry>
  
</feed>
