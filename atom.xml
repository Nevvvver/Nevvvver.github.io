<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never</title>
  
  
  <link href="https://nevvvver.github.io/atom.xml" rel="self"/>
  
  <link href="https://nevvvver.github.io/"/>
  <updated>2022-07-18T09:48:41.697Z</updated>
  <id>https://nevvvver.github.io/</id>
  
  <author>
    <name>Never</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《JavaScript权威指南(第6版)》笔记</title>
    <link href="https://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <id>https://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-11T09:27:54.000Z</published>
    <updated>2022-07-18T09:48:41.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第〇部分"><a href="#第〇部分" class="headerlink" title="第〇部分"></a>第〇部分</h3><h4 id="第1章-JavaScript概述"><a href="#第1章-JavaScript概述" class="headerlink" title="第1章 JavaScript概述"></a>第1章 JavaScript概述</h4><p>电子书：<a href="https://awesome-programming-books.github.io/javascript/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97(%E7%AC%AC6%E7%89%88).pdf">《JavaScript权威指南(第6版)》</a></p><h3 id="第一部分-JavaScript-语言核心"><a href="#第一部分-JavaScript-语言核心" class="headerlink" title="第一部分 JavaScript 语言核心"></a>第一部分 JavaScript 语言核心</h3><h4 id="第2章-词法结构"><a href="#第2章-词法结构" class="headerlink" title="第2章 词法结构"></a>第2章 词法结构</h4><h5 id="2-1-字符集"><a href="#2-1-字符集" class="headerlink" title="2.1 字符集"></a>2.1 字符集</h5><h4 id="第6章-对象"><a href="#第6章-对象" class="headerlink" title="第6章 对象"></a>第6章 对象</h4><ul><li><strong>内置对象（native object）</strong>是由ECMAScript规范定义的对象或类。例如数组、函数、日期、正则表达式等。</li><li><strong>宿主对象（host object）</strong>是由JavaScript解释器所嵌入的宿主环境（比如Web浏览器）定义的。</li><li><strong>自定义对象 （user-defiend object）</strong>是由运行中的JavaScript代码创建的对象。</li><li><strong>自有属性（own property）</strong>是直接在对象中定义的属性。</li><li><strong>继承属性（inherited property）</strong>是在对象的原型对象中定义的属性。</li></ul><h5 id="6-1-创建对象"><a href="#6-1-创建对象" class="headerlink" title="6.1 创建对象"></a>6.1 创建对象</h5><p><strong>对象直接量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> point = &#123; <span class="attr">x</span>:<span class="number">0</span>, <span class="attr">y</span>:<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">&quot;main title&quot;</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sub-title&quot;</span>: <span class="string">&quot;The Definitive Guide&quot;</span>,</span><br><span class="line">  <span class="string">&quot;for&quot;</span>: <span class="string">&quot;all audiences&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">firstname</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">    <span class="attr">surname</span>: <span class="string">&quot;Flanagan&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象直接量是一个表达式，表达式的每次运算都<strong>创建并初始化一个新的对象</strong>。</li></ul><hr><p><strong>关键字new</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();     <span class="comment">// 创建一个空对象，和&#123;&#125;一样</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();      <span class="comment">// 创建一个空数组，和[]一样</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();       <span class="comment">// 创建一个白哦是当前时间的Date对象</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;js&quot;</span>); <span class="comment">// 创建一个可以进行模式匹配的RegExp对象</span></span><br></pre></td></tr></table></figure><ul><li>new运算符后面跟的是一个<strong>函数调用</strong>，这个函数被称为<strong>构造函数（constructor）</strong>。js中原始类型都包含内置的构造函数，也可以自己定义构造函数。</li></ul><hr><p><strong>原型</strong></p><ul><li>每一个JavaScript对象（null除外）对合另一个对象（原型）相关联，每一个对象都从原型继承属性。</li><li>通过new Object()创建的对象也继承自<code>Object.prototype</code>，new Array()</li></ul><p><strong>Object.create()（ES5）</strong></p><h4 id="第9章-类和模块"><a href="#第9章-类和模块" class="headerlink" title="第9章 类和模块"></a>第9章 类和模块</h4><h5 id="9-1-类和原型"><a href="#9-1-类和原型" class="headerlink" title="9.1 类和原型"></a>9.1 类和原型</h5><ul><li>类的所有实例对象都从同一个原型对象上继承属性。</li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range.js: 实现一个能表示值的范围的类</span></span><br><span class="line"><span class="comment">// 这个工厂方法返回一个新的“范围对象”</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">range</span>(<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-2-类和构造函数"><a href="#9-2-类和构造函数" class="headerlink" title="9.2 类和构造函数"></a>9.2 类和构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;   <span class="comment">// 这是一个函数对象</span></span><br><span class="line"><span class="keyword">var</span> p = F.<span class="property"><span class="keyword">prototype</span></span>;    <span class="comment">// 这是F相关联的原型对象</span></span><br><span class="line"><span class="keyword">var</span> c = p.<span class="property">constructor</span>;  <span class="comment">// 这是与原型相关联的函数</span></span><br><span class="line">c === F                 <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">F</span>();        <span class="comment">// 创建类F的一个实例</span></span><br><span class="line">o.<span class="property">constructor</span> === F     <span class="comment">// =&gt; true construtor属性指代这个类</span></span><br></pre></td></tr></table></figure><ul><li>对于任意函数 <code>F.prototype.constructor === F</code></li></ul><p><img src="/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/9-1.png"></p><h5 id="9-3-JavaScript中Java式的类继承"><a href="#9-3-JavaScript中Java式的类继承" class="headerlink" title="9.3 JavaScript中Java式的类继承"></a>9.3 JavaScript中Java式的类继承</h5><ul><li>类字段、类方法；实例字段、实例方法</li><li>构造函数对象<br>原型对象</li></ul><h5 id="9-5-类和类型"><a href="#9-5-类和类型" class="headerlink" title="9.5 类和类型"></a>9.5 类和类型</h5><ul><li>三种可以检测对象的类的方法：instanceof运算符、constructor属性、构造函数的名字。</li><li>三种方法都不完美，但利用鸭式辩型，可以更加关注对象可以完成什么工做而不是对象属于哪个类。</li></ul><h6 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h6><ul><li><code>o instanceof c</code> 返回true，表示o继承自c.prototype，这里的继承可以不是直接继承</li><li>构造函数是类的公共标识，但原型是唯一的标识。instanceof检测了对象的继承关系，而不是检测创建对象的构造函数</li></ul><h6 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h6><p>- </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第〇部分&quot;&gt;&lt;a href=&quot;#第〇部分&quot; class=&quot;headerlink&quot; title=&quot;第〇部分&quot;&gt;&lt;/a&gt;第〇部分&lt;/h3&gt;&lt;h4 id=&quot;第1章-JavaScript概述&quot;&gt;&lt;a href=&quot;#第1章-JavaScript概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Books" scheme="https://nevvvver.github.io/categories/Books/"/>
    
    
    <category term="javascript" scheme="https://nevvvver.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jsoneditor-react的类型声明文件</title>
    <link href="https://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
    <id>https://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</id>
    <published>2022-06-07T09:25:44.000Z</published>
    <updated>2022-06-07T09:46:02.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jsoneditor-react-d-ts"><a href="#jsoneditor-react-d-ts" class="headerlink" title="jsoneditor-react.d.ts"></a>jsoneditor-react.d.ts</h3><p>放在src下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;jsoneditor-react&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JsonEditor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">JsonEditorProps</span>&gt; &#123;</span><br><span class="line">    public <span class="attr">jsonEditor</span>: unknown;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    type <span class="title class_">Mode</span> = <span class="string">&#x27;tree&#x27;</span> | <span class="string">&#x27;view&#x27;</span> | <span class="string">&#x27;form&#x27;</span> | <span class="string">&#x27;code&#x27;</span> | <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    interface <span class="title class_">JsonEditorProps</span> &#123;</span><br><span class="line">      <span class="attr">value</span>: unknown;</span><br><span class="line">      <span class="comment">/** Set the editor mode. Default &#x27;tree&#x27; */</span></span><br><span class="line">      mode?: <span class="title class_">Mode</span>;</span><br><span class="line">      <span class="comment">/** Initial field name for root node */</span></span><br><span class="line">      name?: string;</span><br><span class="line">      <span class="comment">/** Validate the JSON object against a JSON schema. */</span></span><br><span class="line">      <span class="attr">schema</span>: unknown;</span><br><span class="line">      <span class="comment">/** Schemas that are referenced using the $ref property */</span></span><br><span class="line">      schemaRefs?: object;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * If true, object keys in &#x27;tree&#x27;, &#x27;view&#x27; or &#x27;form&#x27; mode list be listed alphabetically</span></span><br><span class="line"><span class="comment">       * instead by their insertion order.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      sortObjectKeys?: boolean;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Set a callback function triggered when json in the JSONEditor change */</span></span><br><span class="line">      onChange?: <span class="function">(<span class="params">value: object[]</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Set a callback function triggered when an error occurs.</span></span><br><span class="line"><span class="comment">       * Invoked with the error as first argument.</span></span><br><span class="line"><span class="comment">       * The callback is only invoked for errors triggered by a users action,</span></span><br><span class="line"><span class="comment">       * like switching from code mode to tree mode or clicking</span></span><br><span class="line"><span class="comment">       * the Format button whilst the editor doesn&#x27;t contain valid JSON.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      onError?: <span class="function">(<span class="params">error: unknown</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      <span class="comment">/** Set a callback function triggered right after the mode is changed by the user. */</span></span><br><span class="line">      onModeChange?: <span class="function">(<span class="params">mode: Mode</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      onClassName?: <span class="function">(<span class="params">args: &#123; path: unknown; field: unknown; value: unknown &#125;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Provide a version of the Ace editor. Only applicable when mode is code */</span></span><br><span class="line">      ace?: object;</span><br><span class="line">      <span class="comment">/** Provide a instance of ajv,the library used for JSON schema validation. */</span></span><br><span class="line">      ajv?: object;</span><br><span class="line">      <span class="comment">/** Set the Ace editor theme, uses included &#x27;ace/theme/jsoneditor&#x27; by default. */</span></span><br><span class="line">      theme?: string;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Enables history, adds a button Undo and Redo to the menu of the JSONEditor.</span></span><br><span class="line"><span class="comment">       * Only applicable when mode is &#x27;tree&#x27; or &#x27;form&#x27;. Default to false</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      history?: boolean;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Adds navigation bar to the menu</span></span><br><span class="line"><span class="comment">       * the navigation bar visualize the current position on the</span></span><br><span class="line"><span class="comment">       * tree structure as well as allows breadcrumbs navigation. Default to true</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      navigationBar?: boolean;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Adds status bar to the buttom of the editor</span></span><br><span class="line"><span class="comment">       * the status bar shows the cursor position and a count of the selected characters.</span></span><br><span class="line"><span class="comment">       * Only applicable when mode is &#x27;code&#x27; or &#x27;text&#x27;. Default to true</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      statusBar?: boolean;</span><br><span class="line">      <span class="comment">/** Enables a search box in the upper right corner of the JSONEditor. Default to true */</span></span><br><span class="line">      search?: boolean;</span><br><span class="line">      <span class="comment">/** Create a box in the editor menu where the user can switch between the specified modes. */</span></span><br><span class="line">      allowedModes?: <span class="title class_">Mode</span>[];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Html element, or react element to render */</span></span><br><span class="line">      tag?: string | <span class="title class_">HTMLElement</span>;</span><br><span class="line">      <span class="comment">/** html element custom props */</span></span><br><span class="line">      htmlElementProps?: object;</span><br><span class="line">      <span class="comment">/** callback to get html element reference */</span></span><br><span class="line">      innerRef?: <span class="function">(<span class="params">ref: unknown</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;jsoneditor-react-d-ts&quot;&gt;&lt;a href=&quot;#jsoneditor-react-d-ts&quot; class=&quot;headerlink&quot; title=&quot;jsoneditor-react.d.ts&quot;&gt;&lt;/a&gt;jsoneditor-react.d.ts&lt;/</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://nevvvver.github.io/categories/TypeScript/"/>
    
    
    <category term="javascript" scheme="https://nevvvver.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="https://nevvvver.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>可枚举性(enumerable)</title>
    <link href="https://nevvvver.github.io/2022/03/15/enumerable/"/>
    <id>https://nevvvver.github.io/2022/03/15/enumerable/</id>
    <published>2022-03-14T18:53:58.000Z</published>
    <updated>2022-03-15T16:09:02.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li><p>在 JavaScript 中，对象的属性可以分为<strong>实例属性</strong>和<strong>原型 (prototype) 属性</strong>。</p><ul><li>实例属性：指的是自身属性。</li><li>原型属性：指的是从原型链上继承的属性。</li><li><code>Object.prototype.hasOwnProperty()</code> 可以判断某一个属性是否是对象的自身属性。</li></ul></li><li><p>对象的每一个属性都有一个<strong>描述对象 (Descriptor)</strong> ,描述对象的 <strong>enumerable</strong> 属性称为“可枚举性”。</p></li><li><p>引入“可枚举性”这个概念的最初目的，就是让某些属性可以规避掉 <code>for...in</code> 操作。</p></li></ul><h3 id="可枚举性的作用"><a href="#可枚举性的作用" class="headerlink" title="可枚举性的作用"></a>可枚举性的作用</h3><p>与可枚举性有关的操作：</p><table><thead><tr><th>函数方法</th><th>描述</th><th align="center">实例属性</th><th align="center">原型属性</th></tr></thead><tbody><tr><td><code>for...in</code></td><td>遍历对象自身和原型上的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center">〇</td></tr><tr><td><code>Object.keys()</code></td><td>返回对象自身的所有<strong>可枚举</strong>属性的键名</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>JSON.stringify</code></td><td>只串行化对象自身的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>Object.assign()</code>(ES6)</td><td>只拷贝对象自身的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>Object.getOwnPropertyNames()</code></td><td>返回对象自身的<strong>所有属性</strong>的键名</td><td align="center">〇</td><td align="center"></td></tr></tbody></table><h4 id="code-samples"><a href="#code-samples" class="headerlink" title="code samples"></a>code samples</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Never&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过直接的赋值和属性初始化的属性，可枚举性默认为true</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">School</span> = <span class="string">&#x27;Tust&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Object.defineProperty() 等定义的属性，可枚举性默认为false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;sex&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="comment">// enumerable: false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// name</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> person)&#123;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// name, School</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(person).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)<span class="comment">// name, sex</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何判断属性是否可枚举"><a href="#如何判断属性是否可枚举" class="headerlink" title="如何判断属性是否可枚举"></a>如何判断属性是否可枚举</h3><ul><li><code>Object.propertyIsEnumerable()</code> 方法可以判断一个属性是否是对象的<strong>可枚举的自身属性</strong>。（注：如果判断的属性是原型属性，不管它是否可枚举都会返回false）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;School&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;sex&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 JavaScript 中，对象的属性可以分为&lt;strong&gt;实例属性&lt;/strong&gt;和&lt;strong&gt;原型 (pro</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nevvvver.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://nevvvver.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="https://nevvvver.github.io/tags/es6/"/>
    
  </entry>
  
</feed>
