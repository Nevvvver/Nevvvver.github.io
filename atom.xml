<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never</title>
  
  
  <link href="http://nevvvver.github.io/atom.xml" rel="self"/>
  
  <link href="http://nevvvver.github.io/"/>
  <updated>2022-07-12T07:50:02.527Z</updated>
  <id>http://nevvvver.github.io/</id>
  
  <author>
    <name>Never</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://nevvvver.github.io/2022/07/12/test/"/>
    <id>http://nevvvver.github.io/2022/07/12/test/</id>
    <published>2022-07-12T07:49:35.000Z</published>
    <updated>2022-07-12T07:50:02.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/./test/testImage.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/./test/testImage.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>《JavaScript权威指南(第6版)》笔记</title>
    <link href="http://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <id>http://nevvvver.github.io/2022/07/11/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-11T09:27:54.000Z</published>
    <updated>2022-07-12T07:36:54.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第〇部分"><a href="#第〇部分" class="headerlink" title="第〇部分"></a>第〇部分</h3><h4 id="第1章-JavaScript概述"><a href="#第1章-JavaScript概述" class="headerlink" title="第1章 JavaScript概述"></a>第1章 JavaScript概述</h4><p>电子书：<a href="https://awesome-programming-books.github.io/javascript/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97(%E7%AC%AC6%E7%89%88).pdf">《JavaScript权威指南(第6版)》</a></p><h3 id="第一部分-JavaScript-语言核心"><a href="#第一部分-JavaScript-语言核心" class="headerlink" title="第一部分 JavaScript 语言核心"></a>第一部分 JavaScript 语言核心</h3><h4 id="第2章-词法结构"><a href="#第2章-词法结构" class="headerlink" title="第2章 词法结构"></a>第2章 词法结构</h4><h5 id="2-1-字符集"><a href="#2-1-字符集" class="headerlink" title="2.1 字符集"></a>2.1 字符集</h5><h4 id="第9章-类和模块"><a href="#第9章-类和模块" class="headerlink" title="第9章 类和模块"></a>第9章 类和模块</h4><h5 id="9-1-类和原型"><a href="#9-1-类和原型" class="headerlink" title="9.1 类和原型"></a>9.1 类和原型</h5><ul><li>类的所有实例对象都从同一个原型对象上继承属性。</li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range.js: 实现一个能表示值的范围的类</span></span><br><span class="line"><span class="comment">// 这个工厂方法返回一个新的“范围对象”</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">range</span>(<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-2-类和构造函数"><a href="#9-2-类和构造函数" class="headerlink" title="9.2 类和构造函数"></a>9.2 类和构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;   <span class="comment">// 这是一个函数对象</span></span><br><span class="line"><span class="keyword">var</span> p = F.<span class="property"><span class="keyword">prototype</span></span>;    <span class="comment">// 这是F相关联的原型对象</span></span><br><span class="line"><span class="keyword">var</span> c = p.<span class="property">constructor</span>;  <span class="comment">// 这是与原型相关联的函数</span></span><br><span class="line">c === F                 <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><ul><li>对于任意函数 <code>F.prototype.constructor === F</code><br><img src="/./JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/testImage.png" alt="jj"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第〇部分&quot;&gt;&lt;a href=&quot;#第〇部分&quot; class=&quot;headerlink&quot; title=&quot;第〇部分&quot;&gt;&lt;/a&gt;第〇部分&lt;/h3&gt;&lt;h4 id=&quot;第1章-JavaScript概述&quot;&gt;&lt;a href=&quot;#第1章-JavaScript概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Books" scheme="http://nevvvver.github.io/categories/Books/"/>
    
    
    <category term="javascript" scheme="http://nevvvver.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>useReducer+useContext</title>
    <link href="http://nevvvver.github.io/2022/06/10/useReducer-useContext/"/>
    <id>http://nevvvver.github.io/2022/06/10/useReducer-useContext/</id>
    <published>2022-06-10T03:08:02.000Z</published>
    <updated>2022-07-11T09:21:40.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习的文章"><a href="#学习的文章" class="headerlink" title="学习的文章"></a>学习的文章</h3><p><a href="https://dev.to/jackent2b/the-best-couple-usecontext-usereducer-4e65">The best Couple: useContext + useReducer !</a><br>Disclaimer:</p><p>This is going to be one of the best post you have ever come across in search of useContext + useReducer hooks!</p><p>Why do we use useContext and usereducer together?</p><p>Reason: To share states between the components i.e. Global State<br>Management</p><p>In the previous posts, we have seen how to make use of useContext and useReducer hooks.</p><p>So, in this post, we will see how to make use of them together!<br><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_X6fGzNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https%3A//dev-to-uploads.s3.amazonaws.com/i/kwmuw3qj5jz3wcwix1u4.JPG"></p><p>In this example, we are going to share the state of the counter between Component A , Component D and Component F!</p><p>Also, the Components hierarchy in our example is as follows:</p><p>1.)Component A<br>2.)Component B -&gt; Component D<br>3.)Component C -&gt; Component E -&gt; Component F</p><p>Steps:</p><p>1.) Create React context in the main component</p><p>2.) Make reducer function in the main component</p><p>3.) Make use of the useReducer function.</p><p>4.) Send context value using Context Provider</p><p>5.) Consume Context Value using useContext hook.</p><p>6.) Transfer action from the components using dispatch</p><p>Okay so let’s get started!</p><p>Step1: Create React Context and reducer() function:<br><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVItofqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https%3A//dev-to-uploads.s3.amazonaws.com/i/tn1hhnrzxrxn7yth8o8f.JPG" alt="step1"></p><p>Step2: In the functional component, call useReducer(reducer,initialState) hook :</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqBG--ZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https%3A//dev-to-uploads.s3.amazonaws.com/i/e7o0vyc66tmskxahlhia.JPG"></p><p>Here, you can see that we have passed the state i.e. counter and dispatch method as the value in the Context Provider.</p><p>Step 3: Now, in order to access the global state in Component A, Component D, and Component F, we need to make use of the useContext Hook to consume the context value passed by the Context Provider.</p><p>(component A)<br><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXRokjIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https%3A//dev-to-uploads.s3.amazonaws.com/i/hcqdw4lt6s2q07xn3no5.JPG"><br>(component D)<br><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mTRB9Re3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https%3A//dev-to-uploads.s3.amazonaws.com/i/ccjg9mco1cw4wtxqkmkx.JPG"></p><p>(component F)<br><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OcAWI3v4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https%3A//dev-to-uploads.s3.amazonaws.com/i/z355nnwd7rl9bypg2qzg.JPG"></p><p>Step 4: In order to change the global state through Components A, D, and F, we have passed action (i.e. increment, decrement, or reset) through the dispatch function.</p><p>This is all you need to manage the global state using useReducer and useContext hook!</p><p>I hope it might have helped you!</p><p>Do share your thaughts!</p><p>*Happy Coding, Thank you! *</p><p>-Jayant Khandelwal</p><h3 id="我的应用"><a href="#我的应用" class="headerlink" title="我的应用"></a>我的应用</h3><p>背景<br>一个多tab选规则的面板 每个tab下面的规则不一样（规则一样，选的值可以不一样）</p><p>但是都是渲染的一个面板 只是切换tab的时候从store里拿不一样的value填进去<br>此时有一个规则组件有校验的问题 只能存在本地  但是state存储无法存储不同tab的校验状态</p><p>所以此时用一个本地的对象来存 以每个tab规则的id来作为索引存每一个规则的校验状态<br>比如规则1 是校验失败 规则2是校验成功<br>这个状态是存在state的无法 如果不专门存在store里是无法区分每个规则的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rule-context.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Dispatch</span>, useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> type <span class="title class_">RuleProps</span> = &#123;</span><br><span class="line">   <span class="attr">helpState</span>: <span class="title class_">Record</span>&lt;string, <span class="title class_">Record</span>&lt;string, string&gt;&gt;;</span><br><span class="line">   <span class="attr">helpDispatch</span>: <span class="title class_">Dispatch</span>&lt;&#123; <span class="attr">type</span>: string; <span class="attr">payload</span>: &#123; <span class="attr">id</span>: string;<span class="attr">code</span>: string; <span class="attr">help</span>: string; flag?: string &#125; &#125;&gt;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MdContext</span> = <span class="title class_">React</span>.<span class="property">createContext</span>&lt;<span class="title class_">RuleProps</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">helpState</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">helpDispatch</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state: Record&lt;string, Record&lt;string, string&gt;&gt;, action: &#123;</span></span><br><span class="line"><span class="params">  type: string;</span></span><br><span class="line"><span class="params">  payload: &#123;</span></span><br><span class="line"><span class="params">    id: string;</span></span><br><span class="line"><span class="params">    code: string;</span></span><br><span class="line"><span class="params">    help: string;</span></span><br><span class="line"><span class="params">    flag?: string;</span></span><br><span class="line"><span class="params">  &#125;;</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        [action.<span class="property">payload</span>.<span class="property">id</span>]: &#123;</span><br><span class="line">          ...state[action.<span class="property">payload</span>.<span class="property">id</span>],</span><br><span class="line">          [action.<span class="property">payload</span>.<span class="property">code</span>]: action.<span class="property">payload</span>.<span class="property">help</span>,</span><br><span class="line">          [<span class="string">`<span class="subst">$&#123;action.payload.code&#125;</span>Flag`</span>]: action.<span class="property">payload</span>.<span class="property">flag</span> <span class="keyword">as</span> string,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useHelpRuleReducer</span> = (<span class="params"></span>) =&gt; <span class="title function_">useReducer</span>(reducer, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MdContext</span>, useHelpRuleReducer &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">//rule.tsx</span><br><span class="line">import &#123; MdContext &#125; from &#x27;rule-context.tsx&#x27;;</span><br><span class="line">const &#123; helpState, helpDispatch &#125; = useContext(MdContext);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">helpDispatch(&#123;</span><br><span class="line">          type: &#x27;add&#x27;,</span><br><span class="line">          payload: &#123;</span><br><span class="line">            code,</span><br><span class="line">            id,</span><br><span class="line">            help: &#x27;校验失败&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">console.log(helpState[id]?.[code])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;学习的文章&quot;&gt;&lt;a href=&quot;#学习的文章&quot; class=&quot;headerlink&quot; title=&quot;学习的文章&quot;&gt;&lt;/a&gt;学习的文章&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://dev.to/jackent2b/the-best-couple-useconte</summary>
      
    
    
    
    <category term="React" scheme="http://nevvvver.github.io/categories/React/"/>
    
    
    <category term="react" scheme="http://nevvvver.github.io/tags/react/"/>
    
    <category term="context" scheme="http://nevvvver.github.io/tags/context/"/>
    
    <category term="reducer" scheme="http://nevvvver.github.io/tags/reducer/"/>
    
    <category term="hooks" scheme="http://nevvvver.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>jsoneditor-react的类型声明文件</title>
    <link href="http://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
    <id>http://nevvvver.github.io/2022/06/07/jsoneditor-react%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</id>
    <published>2022-06-07T09:25:44.000Z</published>
    <updated>2022-06-07T09:46:02.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jsoneditor-react-d-ts"><a href="#jsoneditor-react-d-ts" class="headerlink" title="jsoneditor-react.d.ts"></a>jsoneditor-react.d.ts</h3><p>放在src下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;jsoneditor-react&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JsonEditor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">JsonEditorProps</span>&gt; &#123;</span><br><span class="line">    public <span class="attr">jsonEditor</span>: unknown;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    type <span class="title class_">Mode</span> = <span class="string">&#x27;tree&#x27;</span> | <span class="string">&#x27;view&#x27;</span> | <span class="string">&#x27;form&#x27;</span> | <span class="string">&#x27;code&#x27;</span> | <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    interface <span class="title class_">JsonEditorProps</span> &#123;</span><br><span class="line">      <span class="attr">value</span>: unknown;</span><br><span class="line">      <span class="comment">/** Set the editor mode. Default &#x27;tree&#x27; */</span></span><br><span class="line">      mode?: <span class="title class_">Mode</span>;</span><br><span class="line">      <span class="comment">/** Initial field name for root node */</span></span><br><span class="line">      name?: string;</span><br><span class="line">      <span class="comment">/** Validate the JSON object against a JSON schema. */</span></span><br><span class="line">      <span class="attr">schema</span>: unknown;</span><br><span class="line">      <span class="comment">/** Schemas that are referenced using the $ref property */</span></span><br><span class="line">      schemaRefs?: object;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * If true, object keys in &#x27;tree&#x27;, &#x27;view&#x27; or &#x27;form&#x27; mode list be listed alphabetically</span></span><br><span class="line"><span class="comment">       * instead by their insertion order.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      sortObjectKeys?: boolean;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Set a callback function triggered when json in the JSONEditor change */</span></span><br><span class="line">      onChange?: <span class="function">(<span class="params">value: object[]</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Set a callback function triggered when an error occurs.</span></span><br><span class="line"><span class="comment">       * Invoked with the error as first argument.</span></span><br><span class="line"><span class="comment">       * The callback is only invoked for errors triggered by a users action,</span></span><br><span class="line"><span class="comment">       * like switching from code mode to tree mode or clicking</span></span><br><span class="line"><span class="comment">       * the Format button whilst the editor doesn&#x27;t contain valid JSON.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      onError?: <span class="function">(<span class="params">error: unknown</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      <span class="comment">/** Set a callback function triggered right after the mode is changed by the user. */</span></span><br><span class="line">      onModeChange?: <span class="function">(<span class="params">mode: Mode</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">      onClassName?: <span class="function">(<span class="params">args: &#123; path: unknown; field: unknown; value: unknown &#125;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Provide a version of the Ace editor. Only applicable when mode is code */</span></span><br><span class="line">      ace?: object;</span><br><span class="line">      <span class="comment">/** Provide a instance of ajv,the library used for JSON schema validation. */</span></span><br><span class="line">      ajv?: object;</span><br><span class="line">      <span class="comment">/** Set the Ace editor theme, uses included &#x27;ace/theme/jsoneditor&#x27; by default. */</span></span><br><span class="line">      theme?: string;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Enables history, adds a button Undo and Redo to the menu of the JSONEditor.</span></span><br><span class="line"><span class="comment">       * Only applicable when mode is &#x27;tree&#x27; or &#x27;form&#x27;. Default to false</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      history?: boolean;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Adds navigation bar to the menu</span></span><br><span class="line"><span class="comment">       * the navigation bar visualize the current position on the</span></span><br><span class="line"><span class="comment">       * tree structure as well as allows breadcrumbs navigation. Default to true</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      navigationBar?: boolean;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Adds status bar to the buttom of the editor</span></span><br><span class="line"><span class="comment">       * the status bar shows the cursor position and a count of the selected characters.</span></span><br><span class="line"><span class="comment">       * Only applicable when mode is &#x27;code&#x27; or &#x27;text&#x27;. Default to true</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      statusBar?: boolean;</span><br><span class="line">      <span class="comment">/** Enables a search box in the upper right corner of the JSONEditor. Default to true */</span></span><br><span class="line">      search?: boolean;</span><br><span class="line">      <span class="comment">/** Create a box in the editor menu where the user can switch between the specified modes. */</span></span><br><span class="line">      allowedModes?: <span class="title class_">Mode</span>[];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** Html element, or react element to render */</span></span><br><span class="line">      tag?: string | <span class="title class_">HTMLElement</span>;</span><br><span class="line">      <span class="comment">/** html element custom props */</span></span><br><span class="line">      htmlElementProps?: object;</span><br><span class="line">      <span class="comment">/** callback to get html element reference */</span></span><br><span class="line">      innerRef?: <span class="function">(<span class="params">ref: unknown</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;jsoneditor-react-d-ts&quot;&gt;&lt;a href=&quot;#jsoneditor-react-d-ts&quot; class=&quot;headerlink&quot; title=&quot;jsoneditor-react.d.ts&quot;&gt;&lt;/a&gt;jsoneditor-react.d.ts&lt;/</summary>
      
    
    
    
    <category term="TypeScript" scheme="http://nevvvver.github.io/categories/TypeScript/"/>
    
    
    <category term="javascript" scheme="http://nevvvver.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="http://nevvvver.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>可枚举性(enumerable)</title>
    <link href="http://nevvvver.github.io/2022/03/15/enumerable/"/>
    <id>http://nevvvver.github.io/2022/03/15/enumerable/</id>
    <published>2022-03-14T18:53:58.000Z</published>
    <updated>2022-03-15T16:09:02.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li><p>在 JavaScript 中，对象的属性可以分为<strong>实例属性</strong>和<strong>原型 (prototype) 属性</strong>。</p><ul><li>实例属性：指的是自身属性。</li><li>原型属性：指的是从原型链上继承的属性。</li><li><code>Object.prototype.hasOwnProperty()</code> 可以判断某一个属性是否是对象的自身属性。</li></ul></li><li><p>对象的每一个属性都有一个<strong>描述对象 (Descriptor)</strong> ,描述对象的 <strong>enumerable</strong> 属性称为“可枚举性”。</p></li><li><p>引入“可枚举性”这个概念的最初目的，就是让某些属性可以规避掉 <code>for...in</code> 操作。</p></li></ul><h3 id="可枚举性的作用"><a href="#可枚举性的作用" class="headerlink" title="可枚举性的作用"></a>可枚举性的作用</h3><p>与可枚举性有关的操作：</p><table><thead><tr><th>函数方法</th><th>描述</th><th align="center">实例属性</th><th align="center">原型属性</th></tr></thead><tbody><tr><td><code>for...in</code></td><td>遍历对象自身和原型上的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center">〇</td></tr><tr><td><code>Object.keys()</code></td><td>返回对象自身的所有<strong>可枚举</strong>属性的键名</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>JSON.stringify</code></td><td>只串行化对象自身的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>Object.assign()</code>(ES6)</td><td>只拷贝对象自身的所有<strong>可枚举</strong>属性</td><td align="center">〇</td><td align="center"></td></tr><tr><td><code>Object.getOwnPropertyNames()</code></td><td>返回对象自身的<strong>所有属性</strong>的键名</td><td align="center">〇</td><td align="center"></td></tr></tbody></table><h4 id="code-samples"><a href="#code-samples" class="headerlink" title="code samples"></a>code samples</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Never&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过直接的赋值和属性初始化的属性，可枚举性默认为true</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">School</span> = <span class="string">&#x27;Tust&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Object.defineProperty() 等定义的属性，可枚举性默认为false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;sex&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="comment">// enumerable: false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// name</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> person)&#123;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// name, School</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(person).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)<span class="comment">// name, sex</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何判断属性是否可枚举"><a href="#如何判断属性是否可枚举" class="headerlink" title="如何判断属性是否可枚举"></a>如何判断属性是否可枚举</h3><ul><li><code>Object.propertyIsEnumerable()</code> 方法可以判断一个属性是否是对象的<strong>可枚举的自身属性</strong>。（注：如果判断的属性是原型属性，不管它是否可枚举都会返回false）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;School&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;sex&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 JavaScript 中，对象的属性可以分为&lt;strong&gt;实例属性&lt;/strong&gt;和&lt;strong&gt;原型 (pro</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://nevvvver.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="http://nevvvver.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="http://nevvvver.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>testcomment</title>
    <link href="http://nevvvver.github.io/2022/03/09/testcomment/"/>
    <id>http://nevvvver.github.io/2022/03/09/testcomment/</id>
    <published>2022-03-09T09:35:39.000Z</published>
    <updated>2022-03-09T09:35:39.288Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
